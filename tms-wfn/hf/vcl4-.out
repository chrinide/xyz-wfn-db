#INFO: **** input file is /home/jluis/src/git/db/tms-wfn/hf/run_sp.py ****
#!/usr/bin/env python

import numpy, sys, os
from pyscf import lib, gto, scf, dft
from pyscf.tools import molden
from pyscf.data import radii

def read_molecule(path):

    charge = spin = 0
    with open(path, 'r') as myfile:
        output = myfile.read()
        output = output.lstrip()
        output = output.rstrip()
        output = output.split('\n')

    try:
        int(output[0])
    except ValueError:
        try:
            charge = int(output[0].split(' ')[0])
            spin = int(output[0].split(' ')[1]) - 1
        except ValueError:
            molecule = output
        else:
            molecule = '\n'.join(output[1:])
    else:
        if int(output[0]) == len(output) - 2:
            molecule = '\n'.join(output[2:])
            try:
                charge = int(output[1].split(' ')[0])
                spin = int(output[1].split(' ')[1])-1
            except ValueError:
                pass
        else:
            print "THIS IS NOT A VALID XYZ FILE"

    return (molecule, charge, spin)

directory = '../../tms/'
files = [i for i in os.listdir(directory) if i.endswith('.xyz')]

for filename in files:

    name = filename[:-8]
    mol = gto.Mole()
    (mol.atom, charge, spin) = read_molecule(directory+filename)
    mol.basis = 'aug-cc-pvtz'
    mol.charge = charge
    mol.spin = spin
    mol.output = name+'.out'
    mol.symmetry = 0
    mol.max_memory = 10000
    mol.verbose = 4
    mol.build()

    mf = scf.RHF(mol) 
    mf.max_cycle = 120
    mf.chkfile = name+'.chk'
    mf = scf.addons.remove_linear_dep_(mf)
    mf.kernel()

    dm = mf.make_rdm1()
    nao = mol.nao_nr()
    unit = 2.541746
    origin = ([0.0,0.0,0.0])
    charges = mol.atom_charges()
    coords  = mol.atom_coords()
    mol.set_common_orig(origin)
    r2 = mol.intor_symmetric('int1e_r2')
    r2 = numpy.einsum('ij,ji->', r2, dm)
    lib.logger.info(mf,'Electronic spatial extent <R**2> (au): %.4f', r2)

    lib.logger.info(mf,'* Multipoles in the independent field-basis, Gauge -> (0,0,0)')
    ao_dip = mol.intor_symmetric('int1e_r', comp=3)
    el_dip = numpy.einsum('xij,ji->x', ao_dip, dm)
    lib.logger.info(mf,'Electronic Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *el_dip*unit)
    nucl_dip = numpy.einsum('i,ix->x', charges, coords)
    lib.logger.info(mf,'Nuclear Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *nucl_dip*unit)
    mol_dip = (nucl_dip - el_dip) * unit
    lib.logger.info(mf,'Total Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *mol_dip)

    lib.logger.info(mf,'Quadrupole moments (Debye-Angs)')
    rr = mol.intor_symmetric('int1e_rr', comp=9).reshape(3,3,nao,nao)
    rr = -1.0*numpy.einsum('xyij,ji->xy', rr, dm)
    rr += numpy.einsum('z,zx,zy->xy', charges, coords, coords)
    rr = rr*unit*lib.param.BOHR
    lib.logger.info(mf,'Total Quadrupole moments (XX, YY, ZZ): %.4f, %.4f, %.4f', \
    rr[0,0], rr[1,1], rr[2,2])
    lib.logger.info(mf,'Total Quadrupole moments (XY, XZ, YZ): %.4f, %.4f, %.4f', \
    rr[0,1], rr[0,2], rr[1,2])
 
    lib.logger.info(mf,'Octupole moments (Debye-Angs**2)')
    rrr = mol.intor_symmetric('int1e_rrr', comp=27).reshape(3,3,3,nao,nao)
    rrr = -1.0*numpy.einsum('xyzij,ji->xyz', rrr, dm)
    rrr += numpy.einsum('z,zx,zy,zk->xyk', charges, coords, coords, coords)
    rrr = rrr*unit*lib.param.BOHR**2
    lib.logger.info(mf,'Total Octupole moments (XXX, YYY, ZZZ, XYY): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,0], rrr[1,1,1], rrr[2,2,2], rrr[0,1,1])
    lib.logger.info(mf,'Total Octupole moments (XXY, XXZ, XZZ, YZZ): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,1], rrr[0,0,2], rrr[0,2,2], rrr[1,2,2])
    lib.logger.info(mf,'Total Octupole moments (YYZ, XYZ): %.4f, %.4f', rrr[1,1,2], rrr[0,1,2])

    lib.logger.info(mf,'Hexadecapole moments (Debye-Angs**3)')
    rrrr = mol.intor_symmetric('int1e_rrrr', comp=81).reshape(3,3,3,3,nao,nao)
    rrrr = -1.0*numpy.einsum('xyzwij,ji->xyzw', rrrr, dm)
    rrrr += numpy.einsum('z,zx,zy,zk,zw->xykw', charges, coords, coords, coords, coords)
    rrrr = rrrr*unit*lib.param.BOHR**3
    lib.logger.info(mf,'Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,0], rrrr[1,1,1,1], rrrr[2,2,2,2], rrrr[0,0,0,1])
    lib.logger.info(mf,'Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,2], rrrr[1,1,1,0], rrrr[1,1,1,2], rrrr[2,2,2,0])
    lib.logger.info(mf,'Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): %.4f, %.4f, %.4f, %.4f', \
    rrrr[2,2,2,1], rrrr[0,0,1,1], rrrr[0,0,2,2], rrrr[1,1,2,2])
    lib.logger.info(mf,'Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): %.4f, %.4f, %.4f', \
    rrrr[0,0,1,2], rrrr[1,1,0,2], rrrr[2,2,0,1])
     
    coeff = mf.mo_coeff[:,mf.mo_occ>0]
    occ = mf.mo_occ[mf.mo_occ>0]
    energy = mf.mo_energy[mf.mo_occ>0]
    den_file = name+'.mol'
    fspt = open(den_file,'w')
    molden.header(mol, fspt)
    molden.orbital_coeff(mol, fspt, coeff, ene=energy, occ=occ) 
    fspt.close()                    
    cmd = '/home/jluis/bin/molden2aim '+name
    os.system(cmd)
    den_file = name+'.wfn'
    fspt = open(den_file,'a')
    fspt.write('RHF\n')
    fspt.close()                    

    pmd_file = name+'.pmd'
    fspt = open(pmd_file,'w')
    fspt.write('%s.wfn\n' % (name))
    if (mol.symmetry == False):
        fspt.write('nosymmetry\n')
    fspt.write('tes\n')
    fspt.write('  epsiscp 0.220\n')
    fspt.write('  radialquad 7\n')
    fspt.write('  rmapping 2\n')
    fspt.write('  lmax 10\n')
    fspt.write('  nr 551\n')
    fspt.write('  lebedev 5810\n')
    fspt.write('  betasphere\n')
    for ia in range(mol.natm):
        symb = mol.atom_pure_symbol(ia)
        inuc = lib.parameters.NUC[symb]
        betarad = radii.COVALENT[inuc]/3.5
        fspt.write('  betaradw %d %1.3f\n' % ((ia+1),betarad))
    fspt.write('  radialquadbeta 7\n')
    fspt.write('  rmappingbeta 3\n')
    fspt.write('  lmaxbeta 8\n')
    fspt.write('  nrb 451\n')
    fspt.write('  lebedevbeta 3074\n')
    fspt.write('  dafh\n')
    fspt.write('endtes')
    fspt.close()                    

    cmd = 'rm '+name+'.mol'
    os.system(cmd)
#INFO: ******************** input file end ********************


System: ('Linux', 'cromo', '4.9.0-0.bpo.3-amd64', '#1 SMP Debian 4.9.30-2+deb9u5~bpo8+1 (2017-09-28)', 'x86_64', '')  Threads 4
Python 2.7.14 (default, Apr 10 2018, 19:21:27) 
[GCC 7.3.0]
numpy 1.14.2  scipy 1.0.1
Date: Sun Jul  1 19:57:05 2018
PySCF version 1.5
PySCF path  /home/jluis/src/pyscf/pyscf
GIT ORIG_HEAD 1ca9fa9a79cffe36c02a6597649cc8e4258362c9
GIT HEAD      ref: refs/heads/master
GIT master branch  2a04e98fd7e076282a2b183302d17fc6af3d78e6

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_TMPDIR /scratch-ssd/jluis
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 5
[INPUT] num. electrons = 92
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry 0 subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 V     -0.000001000000  -0.000002000000   0.000000000000 AA   -0.000001889726  -0.000003779452   0.000000000000 Bohr
[INPUT]  2 Cl    -1.231277000000  -1.242705000000   1.385420000000 AA   -2.326776313476  -2.348372103628   2.618064367495 Bohr
[INPUT]  3 Cl     1.231274000000   1.242705000000   1.385418000000 AA    2.326770644298   2.348372103628   2.618060588043 Bohr
[INPUT]  4 Cl     1.231277000000  -1.242703000000  -1.385420000000 AA    2.326776313476  -2.348368324175  -2.618064367495 Bohr
[INPUT]  5 Cl    -1.231273000000   1.242706000000  -1.385419000000 AA   -2.326768754572   2.348373993354  -2.618062477769 Bohr

nuclear repulsion = 622.984759011252
number of shells = 66
number of NR pGTOs = 456
number of NR cGTOs = 293
basis = aug-cc-pvtz
ecp = {}
CPU time:     10626.37


******** <class 'pyscf.scf.hf.RHF'> flags ********
method = RHF
initial guess = minao
damping factor = 0
level shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
DIIS start cycle = 1
DIIS space = 8
SCF tol = 1e-09
SCF gradient tol = None
max. SCF cycles = 120
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = vcl4-.chk
max_memory 10000 MB (current use 152 MB)
Set gradient conv threshold to 3.16228e-05
init E= -2780.78078189084

WARN: HOMO -0.0975221192475878 == LUMO -0.0965232689123385

cycle= 1 E= -2781.12895409293  delta_E= -0.348  |g|= 0.723  |ddm|= 3.05
  HOMO = -0.259354324275919  LUMO = 0.0732234680221565
cycle= 2 E= -2781.14940496673  delta_E= -0.0205  |g|= 0.771  |ddm|= 4.17
  HOMO = -0.214183285180748  LUMO = 0.108517768725236
cycle= 3 E= -2781.25618872166  delta_E= -0.107  |g|= 0.116  |ddm|= 3.54
  HOMO = -0.260551511045002  LUMO = 0.108208757108937
cycle= 4 E= -2781.26171119585  delta_E= -0.00552  |g|= 0.0407  |ddm|= 0.404
  HOMO = -0.261121889686538  LUMO = 0.108284809907068
cycle= 5 E= -2781.26234768738  delta_E= -0.000636  |g|= 0.00929  |ddm|= 0.0786
  HOMO = -0.262267250700601  LUMO = 0.108272496513517
cycle= 6 E= -2781.26240973678  delta_E= -6.2e-05  |g|= 0.00241  |ddm|= 0.0754
  HOMO = -0.262527126848755  LUMO = 0.108276304105439
cycle= 7 E= -2781.26241631855  delta_E= -6.58e-06  |g|= 0.00175  |ddm|= 0.01
  HOMO = -0.262461185513286  LUMO = 0.108276800905619
cycle= 8 E= -2781.26242153222  delta_E= -5.21e-06  |g|= 0.00166  |ddm|= 0.00587
  HOMO = -0.262471177228254  LUMO = 0.108276489968889
cycle= 9 E= -2781.26242615624  delta_E= -4.62e-06  |g|= 0.00167  |ddm|= 0.00452
  HOMO = -0.262479593897711  LUMO = 0.108276536618542
cycle= 10 E= -2781.26241810306  delta_E= 8.05e-06  |g|= 0.00163  |ddm|= 0.00785
  HOMO = -0.262967701432087  LUMO = 0.10827623865095
cycle= 11 E= -2781.2623064088  delta_E= 0.000112  |g|= 0.00154  |ddm|= 0.133
  HOMO = -0.262794766331692  LUMO = 0.108276395427431
cycle= 12 E= -2781.26230291229  delta_E= 3.5e-06  |g|= 0.00128  |ddm|= 0.00565
  HOMO = -0.263689656458586  LUMO = 0.10827571346239
cycle= 13 E= -2781.26223651439  delta_E= 6.64e-05  |g|= 0.00268  |ddm|= 0.163
  HOMO = -0.263974572777421  LUMO = 0.10827563507428
cycle= 14 E= -2781.26223643908  delta_E= 7.53e-08  |g|= 0.00329  |ddm|= 0.00412
  HOMO = -0.263178870352275  LUMO = 0.108275967910593
cycle= 15 E= -2781.26223310195  delta_E= 3.34e-06  |g|= 0.00163  |ddm|= 0.0543
  HOMO = -0.262511424961169  LUMO = 0.108275985232986
cycle= 16 E= -2781.26223368182  delta_E= -5.8e-07  |g|= 0.000186  |ddm|= 0.008
  HOMO = -0.26236985833283  LUMO = 0.108276034687744
cycle= 17 E= -2781.26223367755  delta_E= 4.28e-09  |g|= 0.000106  |ddm|= 0.00334
  HOMO = -0.262434974093135  LUMO = 0.108275998054786
cycle= 18 E= -2781.2622336805  delta_E= -2.95e-09  |g|= 2.33e-05  |ddm|= 0.000448
  HOMO = -0.26242694925135  LUMO = 0.108275999484974
cycle= 19 E= -2781.26223367966  delta_E= 8.35e-10  |g|= 5.86e-06  |ddm|= 0.000707
  HOMO = -0.262424186495391  LUMO = 0.108276002734208
Extra cycle  E= -2781.26223367967  delta_E= -9.09e-12  |g|= 2.11e-06  |ddm|= 1.37e-05
converged SCF energy = -2781.26223367967
Electronic spatial extent <R**2> (au): 1396.9830
* Multipoles in the independent field-basis, Gauge -> (0,0,0)
Electronic Dipole moment(X, Y, Z, Debye): -0.0000, 0.0000, -0.0001
Nuclear Dipole moment(X, Y, Z, Debye): -0.0000, 0.0000, -0.0001
Total Dipole moment(X, Y, Z, Debye): -0.0000, -0.0000, 0.0000
Quadrupole moments (Debye-Angs)
Total Quadrupole moments (XX, YY, ZZ): -83.1265, -83.3576, -86.0334
Total Quadrupole moments (XY, XZ, YZ): -0.0000, 0.0000, 0.0000
Octupole moments (Debye-Angs**2)
Total Octupole moments (XXX, YYY, ZZZ, XYY): 0.0000, -0.0000, 0.0000, 0.0000
Total Octupole moments (XXY, XXZ, XZZ, YZZ): 0.0000, 0.0000, 0.0000, -0.0000
Total Octupole moments (YYZ, XYZ): 0.0000, -16.7080
Hexadecapole moments (Debye-Angs**3)
Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): -620.2105, -630.0087, -756.7875, -0.0001
Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): 0.0006, -0.0001, 0.0002, 0.0006
Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): 0.0002, -220.0577, -239.2021, -240.8098
Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): 0.0001, 0.0002, -0.0000
