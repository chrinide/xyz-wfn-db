#INFO: **** input file is /home/jluis/src/git/db/molecules-wfn/hf/run_sp.py ****
#!/usr/bin/env python

import numpy, sys, os
from pyscf import lib, gto, scf, dft
from pyscf.tools import molden
from pyscf.data import radii

def read_molecule(path):

    charge = spin = 0
    with open(path, 'r') as myfile:
        output = myfile.read()
        output = output.lstrip()
        output = output.rstrip()
        output = output.split('\n')

    try:
        int(output[0])
    except ValueError:
        try:
            charge = int(output[0].split(' ')[0])
            spin = int(output[0].split(' ')[1]) - 1
        except ValueError:
            molecule = output
        else:
            molecule = '\n'.join(output[1:])
    else:
        if int(output[0]) == len(output) - 2:
            molecule = '\n'.join(output[2:])
            try:
                charge = int(output[1].split(' ')[0])
                spin = int(output[1].split(' ')[1])-1
            except ValueError:
                pass
        else:
            print "THIS IS NOT A VALID XYZ FILE"

    return (molecule, charge, spin)

directory = '../../molecules/'
files = [i for i in os.listdir(directory) if i.endswith('.xyz')]

for filename in files:

    name = filename[:-8]
    mol = gto.Mole()
    (mol.atom, charge, spin) = read_molecule(directory+filename)
    mol.basis = 'aug-cc-pvtz'
    mol.charge = charge
    mol.spin = spin
    mol.output = name+'.out'
    mol.symmetry = 0
    mol.max_memory = 10000
    mol.verbose = 4
    mol.build()

    mf = scf.RHF(mol) 
    mf = scf.addons.remove_linear_dep_(mf)
    mf.max_cycle = 120
    mf.chkfile = name+'.chk'
    mf.kernel()

    dm = mf.make_rdm1()
    nao = mol.nao_nr()
    unit = 2.541746
    origin = ([0.0,0.0,0.0])
    charges = mol.atom_charges()
    coords  = mol.atom_coords()
    mol.set_common_orig(origin)
    r2 = mol.intor_symmetric('int1e_r2')
    r2 = numpy.einsum('ij,ji->', r2, dm)
    lib.logger.info(mf,'Electronic spatial extent <R**2> (au): %.4f', r2)

    lib.logger.info(mf,'* Multipoles in the independent field-basis, Gauge -> (0,0,0)')
    ao_dip = mol.intor_symmetric('int1e_r', comp=3)
    el_dip = numpy.einsum('xij,ji->x', ao_dip, dm)
    lib.logger.info(mf,'Electronic Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *el_dip*unit)
    nucl_dip = numpy.einsum('i,ix->x', charges, coords)
    lib.logger.info(mf,'Nuclear Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *nucl_dip*unit)
    mol_dip = (nucl_dip - el_dip) * unit
    lib.logger.info(mf,'Total Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *mol_dip)

    lib.logger.info(mf,'Quadrupole moments (Debye-Angs)')
    rr = mol.intor_symmetric('int1e_rr', comp=9).reshape(3,3,nao,nao)
    rr = -1.0*numpy.einsum('xyij,ji->xy', rr, dm)
    rr += numpy.einsum('z,zx,zy->xy', charges, coords, coords)
    rr = rr*unit*lib.param.BOHR
    lib.logger.info(mf,'Total Quadrupole moments (XX, YY, ZZ): %.4f, %.4f, %.4f', \
    rr[0,0], rr[1,1], rr[2,2])
    lib.logger.info(mf,'Total Quadrupole moments (XY, XZ, YZ): %.4f, %.4f, %.4f', \
    rr[0,1], rr[0,2], rr[1,2])
 
    lib.logger.info(mf,'Octupole moments (Debye-Angs**2)')
    rrr = mol.intor_symmetric('int1e_rrr', comp=27).reshape(3,3,3,nao,nao)
    rrr = -1.0*numpy.einsum('xyzij,ji->xyz', rrr, dm)
    rrr += numpy.einsum('z,zx,zy,zk->xyk', charges, coords, coords, coords)
    rrr = rrr*unit*lib.param.BOHR**2
    lib.logger.info(mf,'Total Octupole moments (XXX, YYY, ZZZ, XYY): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,0], rrr[1,1,1], rrr[2,2,2], rrr[0,1,1])
    lib.logger.info(mf,'Total Octupole moments (XXY, XXZ, XZZ, YZZ): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,1], rrr[0,0,2], rrr[0,2,2], rrr[1,2,2])
    lib.logger.info(mf,'Total Octupole moments (YYZ, XYZ): %.4f, %.4f', rrr[1,1,2], rrr[0,1,2])

    lib.logger.info(mf,'Hexadecapole moments (Debye-Angs**3)')
    rrrr = mol.intor_symmetric('int1e_rrrr', comp=81).reshape(3,3,3,3,nao,nao)
    rrrr = -1.0*numpy.einsum('xyzwij,ji->xyzw', rrrr, dm)
    rrrr += numpy.einsum('z,zx,zy,zk,zw->xykw', charges, coords, coords, coords, coords)
    rrrr = rrrr*unit*lib.param.BOHR**3
    lib.logger.info(mf,'Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,0], rrrr[1,1,1,1], rrrr[2,2,2,2], rrrr[0,0,0,1])
    lib.logger.info(mf,'Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,2], rrrr[1,1,1,0], rrrr[1,1,1,2], rrrr[2,2,2,0])
    lib.logger.info(mf,'Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): %.4f, %.4f, %.4f, %.4f', \
    rrrr[2,2,2,1], rrrr[0,0,1,1], rrrr[0,0,2,2], rrrr[1,1,2,2])
    lib.logger.info(mf,'Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): %.4f, %.4f, %.4f', \
    rrrr[0,0,1,2], rrrr[1,1,0,2], rrrr[2,2,0,1])
     
    coeff = mf.mo_coeff[:,mf.mo_occ>0]
    occ = mf.mo_occ[mf.mo_occ>0]
    energy = mf.mo_energy[mf.mo_occ>0]
    den_file = name+'.mol'
    fspt = open(den_file,'w')
    molden.header(mol, fspt)
    molden.orbital_coeff(mol, fspt, coeff, ene=energy, occ=occ) 
    fspt.close()                    
    cmd = '/home/jluis/bin/molden2aim '+name
    os.system(cmd)
    den_file = name+'.wfn'
    fspt = open(den_file,'a')
    fspt.write('RHF\n')
    fspt.close()                    

    pmd_file = name+'.pmd'
    fspt = open(pmd_file,'w')
    fspt.write('%s.wfn\n' % (name))
    if (mol.symmetry == False):
        fspt.write('nosymmetry\n')
    fspt.write('tes\n')
    fspt.write('  epsiscp 0.220\n')
    fspt.write('  radialquad 7\n')
    fspt.write('  rmapping 2\n')
    fspt.write('  lmax 10\n')
    fspt.write('  nr 551\n')
    fspt.write('  lebedev 5810\n')
    fspt.write('  betasphere\n')
    for ia in range(mol.natm):
        symb = mol.atom_pure_symbol(ia)
        inuc = lib.parameters.NUC[symb]
        betarad = radii.COVALENT[inuc]/3.5
        fspt.write('  betaradw %d %1.3f\n' % ((ia+1),betarad))
    fspt.write('  radialquadbeta 7\n')
    fspt.write('  rmappingbeta 3\n')
    fspt.write('  lmaxbeta 8\n')
    fspt.write('  nrb 451\n')
    fspt.write('  lebedevbeta 3074\n')
    fspt.write('  dafh\n')
    fspt.write('endtes')
    fspt.close()                    

    cmd = 'rm '+name+'.mol'
    os.system(cmd)
#INFO: ******************** input file end ********************


System: ('Linux', 'silicio', '3.16.0-4-amd64', '#1 SMP Debian 3.16.51-3 (2017-12-13)', 'x86_64', '')  Threads 12
Python 2.7.14 (default, Apr  9 2018, 16:34:43) 
[GCC 7.3.0]
numpy 1.14.2  scipy 1.0.1
Date: Wed Jun 27 23:47:48 2018
PySCF version 1.5
PySCF path  /home/jluis/src/pyscf/pyscf
GIT ORIG_HEAD f2dbb26d09ae5148fbf5975669a994500ac7a4c9
GIT HEAD      ref: refs/heads/master
GIT master branch  f2dbb26d09ae5148fbf5975669a994500ac7a4c9

[ENV] PYSCF_TMPDIR /scratch-ssd/jluis
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 66
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry 0 subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Cl     2.294738000000   1.376596000000  -0.738272000000 AA    4.336426347632   2.601389424172  -1.395131885435 Bohr
[INPUT]  2 O     -0.077247000000   0.197796000000   1.004496000000 AA   -0.145975673944   0.373780268534   1.898222333221 Bohr
[INPUT]  3 Cl    -0.385055000000   1.436641000000   0.288706000000 AA   -0.727648492894   2.714858029321   0.545575270519 Bohr
[INPUT]  4 O      1.179241000000   2.290063000000   0.132932000000 AA    2.228442524858   4.327591878000   0.251205073191 Bohr
[INPUT]  5 O     -0.853364000000   1.238620000000  -1.083619000000 AA   -1.612624244563   2.340652572409  -2.047743133375 Bohr
[INPUT]  6 O     -1.084463000000   2.462225000000   1.059476000000 AA   -2.049338062224   4.652930907057   2.002119475550 Bohr

nuclear repulsion = 428.375013131905
number of shells = 78
number of NR pGTOs = 382
number of NR cGTOs = 284
basis = aug-cc-pvtz
ecp = {}
CPU time:    147140.22


******** <class 'pyscf.scf.hf.RHF'> flags ********
method = RHF
initial guess = minao
damping factor = 0
level shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
DIIS start cycle = 1
DIIS space = 8
SCF tol = 1e-09
SCF gradient tol = None
max. SCF cycles = 120
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = cl2o4.chk
max_memory 10000 MB (current use 177 MB)
Set gradient conv threshold to 3.16228e-05
init E= -1219.95338422992
  HOMO = -0.338396600061489  LUMO = -0.0956422353134961
cycle= 1 E= -1217.78009824115  delta_E= 2.17  |g|= 1.31  |ddm|= 2.23
  HOMO = -0.52919767156708  LUMO = -0.151439347082296
cycle= 2 E= -1217.87184953525  delta_E= -0.0918  |g|= 1.19  |ddm|= 1.12
  HOMO = -0.490456494774877  LUMO = -0.00294376123671832
cycle= 3 E= -1218.10959465709  delta_E= -0.238  |g|= 0.141  |ddm|= 0.561
  HOMO = -0.490524189882838  LUMO = 0.00612999201523762
cycle= 4 E= -1218.11350362285  delta_E= -0.00391  |g|= 0.0574  |ddm|= 0.108
  HOMO = -0.490133334863018  LUMO = 0.00983883827402118
cycle= 5 E= -1218.11434284733  delta_E= -0.000839  |g|= 0.0221  |ddm|= 0.0447
  HOMO = -0.493616709745144  LUMO = 0.00772202690444818
cycle= 6 E= -1218.11452095132  delta_E= -0.000178  |g|= 0.00702  |ddm|= 0.0197
  HOMO = -0.494510508061566  LUMO = 0.00837502225037783
cycle= 7 E= -1218.11456031817  delta_E= -3.94e-05  |g|= 0.00232  |ddm|= 0.0129
  HOMO = -0.494569085979736  LUMO = 0.0083808337091345
cycle= 8 E= -1218.11456442923  delta_E= -4.11e-06  |g|= 0.00123  |ddm|= 0.00408
  HOMO = -0.494792022519872  LUMO = 0.00835356325487101
cycle= 9 E= -1218.11456517554  delta_E= -7.46e-07  |g|= 0.000486  |ddm|= 0.00165
  HOMO = -0.494884729998887  LUMO = 0.00834655657288642
cycle= 10 E= -1218.11456531294  delta_E= -1.37e-07  |g|= 0.000198  |ddm|= 0.00075
  HOMO = -0.494885112266095  LUMO = 0.00833674334671013
cycle= 11 E= -1218.11456533849  delta_E= -2.56e-08  |g|= 7.76e-05  |ddm|= 0.000341
  HOMO = -0.494904275416806  LUMO = 0.00832848733044603
cycle= 12 E= -1218.11456534257  delta_E= -4.08e-09  |g|= 2.74e-05  |ddm|= 0.000156
  HOMO = -0.494905766941233  LUMO = 0.00833116694395561
cycle= 13 E= -1218.11456534283  delta_E= -2.6e-10  |g|= 1.18e-05  |ddm|= 3.26e-05
  HOMO = -0.494906499375337  LUMO = 0.00833012803559055
Extra cycle  E= -1218.11456534287  delta_E= -4.57e-11  |g|= 8.8e-06  |ddm|= 1.18e-05
converged SCF energy = -1218.11456534287
Electronic spatial extent <R**2> (au): 1268.8161
* Multipoles in the independent field-basis, Gauge -> (0,0,0)
Electronic Dipole moment(X, Y, Z, Debye): 122.2251, 467.7150, 6.7596
Nuclear Dipole moment(X, Y, Z, Debye): 123.8167, 467.5182, 6.0696
Total Dipole moment(X, Y, Z, Debye): 1.5916, -0.1968, -0.6900
Quadrupole moments (Debye-Angs)
Total Quadrupole moments (XX, YY, ZZ): -43.0235, -49.1744, -48.2675
Total Quadrupole moments (XY, XZ, YZ): 2.1498, -2.0874, -0.7381
Octupole moments (Debye-Angs**2)
Total Octupole moments (XXX, YYY, ZZZ, XYY): -44.3097, -214.8802, -2.5751, -14.8705
Total Octupole moments (XXY, XXZ, XZZ, YZZ): -68.3413, -6.7368, -14.7528, -71.3825
Total Octupole moments (YYZ, XYZ): -3.7767, -0.0598
Hexadecapole moments (Debye-Angs**3)
Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): -504.5758, -779.3809, -196.1658, -70.0732
Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): 46.9906, -70.3966, -17.6435, 67.0795
Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): -6.4209, -221.9943, -116.5074, -164.0117
Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): -6.2721, 26.4966, -22.4645
