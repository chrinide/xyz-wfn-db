#INFO: **** input file is /home/jluis/src/git/db/aromatic-wfn/scan/run_sp.py ****
#!/usr/bin/env python

import numpy, sys, os
from pyscf import lib, gto, scf, dft
from pyscf.tools import molden
from pyscf.data import radii

def read_molecule(path):

    charge = spin = 0
    with open(path, 'r') as myfile:
        output = myfile.read()
        output = output.lstrip()
        output = output.rstrip()
        output = output.split('\n')

    try:
        int(output[0])
    except ValueError:
        try:
            charge = int(output[0].split(' ')[0])
            spin = int(output[0].split(' ')[1]) - 1
        except ValueError:
            molecule = output
        else:
            molecule = '\n'.join(output[1:])
    else:
        if int(output[0]) == len(output) - 2:
            molecule = '\n'.join(output[2:])
            try:
                charge = int(output[1].split(' ')[0])
                spin = int(output[1].split(' ')[1])-1
            except ValueError:
                pass
        else:
            print "THIS IS NOT A VALID XYZ FILE"

    return (molecule, charge, spin)

directory = '../../aromatic/'
files = [i for i in os.listdir(directory) if i.endswith('.xyz')]

for filename in files:

    name = filename[:-8]
    mol = gto.Mole()
    (mol.atom, charge, spin) = read_molecule(directory+filename)
    mol.basis = 'aug-cc-pvtz'
    mol.charge = charge
    mol.spin = spin
    mol.output = name+'.out'
    mol.symmetry = 0
    mol.verbose = 4
    mol.build()

    mf = dft.RKS(mol) 
    mf.grids.level = 4
    mf.xc = 'scan'
    mf.max_cycle = 120
    mf.chkfile = name+'.chk'
    mf = scf.addons.remove_linear_dep_(mf)
    mf.kernel()

    dm = mf.make_rdm1()
    nao = mol.nao_nr()
    unit = 2.541746
    origin = ([0.0,0.0,0.0])
    charges = mol.atom_charges()
    coords  = mol.atom_coords()
    mol.set_common_orig(origin)
    r2 = mol.intor_symmetric('int1e_r2')
    r2 = numpy.einsum('ij,ji->', r2, dm)
    lib.logger.info(mf,'Electronic spatial extent <R**2> (au): %.4f', r2)

    lib.logger.info(mf,'* Multipoles in the independent field-basis, Gauge -> (0,0,0)')
    ao_dip = mol.intor_symmetric('int1e_r', comp=3)
    el_dip = numpy.einsum('xij,ji->x', ao_dip, dm)
    lib.logger.info(mf,'Electronic Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *el_dip*unit)
    nucl_dip = numpy.einsum('i,ix->x', charges, coords)
    lib.logger.info(mf,'Nuclear Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *nucl_dip*unit)
    mol_dip = (nucl_dip - el_dip) * unit
    lib.logger.info(mf,'Total Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *mol_dip)

    lib.logger.info(mf,'Quadrupole moments (Debye-Angs)')
    rr = mol.intor_symmetric('int1e_rr', comp=9).reshape(3,3,nao,nao)
    rr = -1.0*numpy.einsum('xyij,ji->xy', rr, dm)
    rr += numpy.einsum('z,zx,zy->xy', charges, coords, coords)
    rr = rr*unit*lib.param.BOHR
    lib.logger.info(mf,'Total Quadrupole moments (XX, YY, ZZ): %.4f, %.4f, %.4f', \
    rr[0,0], rr[1,1], rr[2,2])
    lib.logger.info(mf,'Total Quadrupole moments (XY, XZ, YZ): %.4f, %.4f, %.4f', \
    rr[0,1], rr[0,2], rr[1,2])
 
    lib.logger.info(mf,'Octupole moments (Debye-Angs**2)')
    rrr = mol.intor_symmetric('int1e_rrr', comp=27).reshape(3,3,3,nao,nao)
    rrr = -1.0*numpy.einsum('xyzij,ji->xyz', rrr, dm)
    rrr += numpy.einsum('z,zx,zy,zk->xyk', charges, coords, coords, coords)
    rrr = rrr*unit*lib.param.BOHR**2
    lib.logger.info(mf,'Total Octupole moments (XXX, YYY, ZZZ, XYY): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,0], rrr[1,1,1], rrr[2,2,2], rrr[0,1,1])
    lib.logger.info(mf,'Total Octupole moments (XXY, XXZ, XZZ, YZZ): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,1], rrr[0,0,2], rrr[0,2,2], rrr[1,2,2])
    lib.logger.info(mf,'Total Octupole moments (YYZ, XYZ): %.4f, %.4f', rrr[1,1,2], rrr[0,1,2])

    lib.logger.info(mf,'Hexadecapole moments (Debye-Angs**3)')
    rrrr = mol.intor_symmetric('int1e_rrrr', comp=81).reshape(3,3,3,3,nao,nao)
    rrrr = -1.0*numpy.einsum('xyzwij,ji->xyzw', rrrr, dm)
    rrrr += numpy.einsum('z,zx,zy,zk,zw->xykw', charges, coords, coords, coords, coords)
    rrrr = rrrr*unit*lib.param.BOHR**3
    lib.logger.info(mf,'Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,0], rrrr[1,1,1,1], rrrr[2,2,2,2], rrrr[0,0,0,1])
    lib.logger.info(mf,'Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,2], rrrr[1,1,1,0], rrrr[1,1,1,2], rrrr[2,2,2,0])
    lib.logger.info(mf,'Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): %.4f, %.4f, %.4f, %.4f', \
    rrrr[2,2,2,1], rrrr[0,0,1,1], rrrr[0,0,2,2], rrrr[1,1,2,2])
    lib.logger.info(mf,'Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): %.4f, %.4f, %.4f', \
    rrrr[0,0,1,2], rrrr[1,1,0,2], rrrr[2,2,0,1])
     
    coeff = mf.mo_coeff[:,mf.mo_occ>0]
    occ = mf.mo_occ[mf.mo_occ>0]
    energy = mf.mo_energy[mf.mo_occ>0]
    den_file = name+'.mol'
    fspt = open(den_file,'w')
    molden.header(mol, fspt)
    molden.orbital_coeff(mol, fspt, coeff, ene=energy, occ=occ) 
    fspt.close()                    
    cmd = '/home/jluis/bin/molden2aim '+name
    os.system(cmd)
    den_file = name+'.wfn'
    fspt = open(den_file,'a')
    fspt.write('RHF\n')
    fspt.close()                    

    pmd_file = name+'.pmd'
    fspt = open(pmd_file,'w')
    fspt.write('%s.wfn\n' % (name))
    if (mol.symmetry == False):
        fspt.write('nosymmetry\n')
    fspt.write('tes\n')
    fspt.write('  epsiscp 0.220\n')
    fspt.write('  radialquad 7\n')
    fspt.write('  rmapping 2\n')
    fspt.write('  lmax 10\n')
    fspt.write('  nr 551\n')
    fspt.write('  lebedev 5810\n')
    fspt.write('  betasphere\n')
    for ia in range(mol.natm):
        symb = mol.atom_pure_symbol(ia)
        inuc = lib.parameters.NUC[symb]
        betarad = radii.COVALENT[inuc]/3.5
        fspt.write('  betaradw %d %1.3f\n' % ((ia+1),betarad))
    fspt.write('  radialquadbeta 7\n')
    fspt.write('  rmappingbeta 3\n')
    fspt.write('  lmaxbeta 8\n')
    fspt.write('  nrb 451\n')
    fspt.write('  lebedevbeta 3074\n')
    fspt.write('  dafh\n')
    fspt.write('endtes')
    fspt.close()                    

    cmd = 'rm '+name+'.mol'
    os.system(cmd)

#INFO: ******************** input file end ********************


System: ('Linux', 'silicio', '3.16.0-4-amd64', '#1 SMP Debian 3.16.51-3 (2017-12-13)', 'x86_64', '')  Threads 12
Python 2.7.14 (default, Apr  9 2018, 16:34:43) 
[GCC 7.3.0]
numpy 1.14.2  scipy 1.0.1
Date: Mon Jul  2 19:32:31 2018
PySCF version 1.5
PySCF path  /home/jluis/src/pyscf/pyscf
GIT ORIG_HEAD f2dbb26d09ae5148fbf5975669a994500ac7a4c9
GIT HEAD      ref: refs/heads/master
GIT master branch  f2dbb26d09ae5148fbf5975669a994500ac7a4c9

[ENV] PYSCF_TMPDIR /scratch-ssd/jluis
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 10
[INPUT] num. electrons = 60
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry 0 subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 S      1.193808000000  -1.431457000000   0.000001000000 AA    2.255970165315  -2.705061689092   0.000001889726 Bohr
[INPUT]  2 S      1.746168000000   0.645167000000   0.000000000000 AA    3.299779287480   1.219188934607   0.000000000000 Bohr
[INPUT]  3 C      0.212048000000   1.510679000000   0.000000000000 AA    0.400712645262   2.854769572132   0.000000000000 Bohr
[INPUT]  4 C     -1.038230000000   1.028982000000   0.000000000000 AA   -1.961970354307   1.944494167107   0.000000000000 Bohr
[INPUT]  5 C     -1.413297000000  -0.381148000000   0.000000000000 AA   -2.670744262669  -0.720265332926   0.000000000000 Bohr
[INPUT]  6 C     -0.567597000000  -1.420384000000  -0.000001000000 AA   -1.072602879125  -2.684136751714  -0.000001889726 Bohr
[INPUT]  7 H      0.401591000000   2.586459000000   0.000000000000 AA    0.758897004090   4.887699142416   0.000000000000 Bohr
[INPUT]  8 H     -1.847501000000   1.760041000000   0.000001000000 AA   -3.491270904860   3.325995458006   0.000001889726 Bohr
[INPUT]  9 H     -2.478829000000  -0.613542000000   0.000000000000 AA   -4.684307919629  -1.159426345918   0.000000000000 Bohr
[INPUT] 10 H     -0.937551000000  -2.448177000000   0.000000000000 AA   -1.771714617812  -4.626384034459   0.000000000000 Bohr

nuclear repulsion = 329.731770970414
number of shells = 114
number of NR pGTOs = 482
number of NR cGTOs = 376
basis = aug-cc-pvtz
ecp = {}
CPU time:      4062.35


******** <class 'pyscf.dft.rks.RKS'> flags ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
DIIS start cycle = 1
DIIS space = 8
SCF tol = 1e-09
SCF gradient tol = None
max. SCF cycles = 120
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = 1_2-dithiin.chk
max_memory 64000 MB (current use 171 MB)
XC functionals = scan
small_rho_cutoff = 1e-07
radial grids: 
    Treutler-Ahlrichs (JCP 102, 346 (M4)) radial grids
    
becke partition: Becke, JCP, 88, 2547 (1988)
pruning grids: <function nwchem_prune at 0x2b1990bce5f0>
grids dens level: 4
symmetrized grids: 0
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b1990bce500>
Set gradient conv threshold to 3.16228e-05
tot grids = 234404
init E= -951.763142826085
  HOMO = -0.228538432803795  LUMO = -0.168079649099213
cycle= 1 E= -950.790945633389  delta_E= 0.972  |g|= 0.805  |ddm|= 5.94
  HOMO = -0.092719027549207  LUMO = -0.0813477422167547
cycle= 2 E= -949.44208514865  delta_E= 1.35  |g|= 1.94  |ddm|= 7.25
  HOMO = -0.124857088990766  LUMO = -0.0689565916991527
cycle= 3 E= -950.890719989445  delta_E= -1.45  |g|= 0.412  |ddm|= 6.77
  HOMO = -0.167691247808533  LUMO = -0.0797786066641299
cycle= 4 E= -950.950380519852  delta_E= -0.0597  |g|= 0.0933  |ddm|= 0.659
  HOMO = -0.161492745469144  LUMO = -0.0738464749764894
cycle= 5 E= -950.95142076927  delta_E= -0.00104  |g|= 0.0752  |ddm|= 0.31
  HOMO = -0.161755753342545  LUMO = -0.0762418993867818
cycle= 6 E= -950.952707507256  delta_E= -0.00129  |g|= 0.0274  |ddm|= 0.0923
  HOMO = -0.161866149314004  LUMO = -0.0757400520222211
cycle= 7 E= -950.952896601744  delta_E= -0.000189  |g|= 0.00527  |ddm|= 0.0376
  HOMO = -0.162071345239748  LUMO = -0.0757150498556489
cycle= 8 E= -950.952904324622  delta_E= -7.72e-06  |g|= 0.00112  |ddm|= 0.0228
  HOMO = -0.162159209540193  LUMO = -0.0758033177273472
cycle= 9 E= -950.95290465607  delta_E= -3.31e-07  |g|= 0.000412  |ddm|= 0.00831
  HOMO = -0.162141685404966  LUMO = -0.0757902597965962
cycle= 10 E= -950.952904685013  delta_E= -2.89e-08  |g|= 0.000228  |ddm|= 0.00244
  HOMO = -0.16213894850277  LUMO = -0.0757893120632041
cycle= 11 E= -950.952904698117  delta_E= -1.31e-08  |g|= 0.000102  |ddm|= 0.000578
  HOMO = -0.162137314980271  LUMO = -0.0757884445880553
cycle= 12 E= -950.952904701284  delta_E= -3.17e-09  |g|= 2.09e-05  |ddm|= 0.000436
  HOMO = -0.162136883838807  LUMO = -0.0757869940186348
cycle= 13 E= -950.9529047014  delta_E= -1.16e-10  |g|= 8.95e-06  |ddm|= 0.000291
  HOMO = -0.162138785628527  LUMO = -0.075789350984184
Extra cycle  E= -950.952904701369  delta_E= 3.07e-11  |g|= 1.36e-05  |ddm|= 6.94e-05
converged SCF energy = -950.952904701369
Electronic spatial extent <R**2> (au): 791.4587
* Multipoles in the independent field-basis, Gauge -> (0,0,0)
Electronic Dipole moment(X, Y, Z, Debye): 123.3061, -33.4134, 0.0001
Nuclear Dipole moment(X, Y, Z, Debye): 121.6885, -32.9840, 0.0001
Total Dipole moment(X, Y, Z, Debye): -1.6175, 0.4294, 0.0000
Quadrupole moments (Debye-Angs)
Total Quadrupole moments (XX, YY, ZZ): -47.7178, -43.2651, -53.9051
Total Quadrupole moments (XY, XZ, YZ): 1.2775, -0.0000, -0.0000
Octupole moments (Debye-Angs**2)
Total Octupole moments (XXX, YYY, ZZZ, XYY): -65.7152, 19.1492, -0.0000, -23.3945
Total Octupole moments (XXY, XXZ, XZZ, YZZ): 4.9256, 0.0000, -20.4947, 5.5651
Total Octupole moments (YYZ, XYZ): -0.0000, -0.0000
Hexadecapole moments (Debye-Angs**3)
Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): -527.2618, -426.7682, -68.0216, 3.1697
Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): -0.0000, 25.9277, 0.0000, -0.0001
Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): 0.0000, -167.9017, -113.0235, -101.2549
Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): 0.0000, -0.0000, 3.4176
