#INFO: **** input file is /home/jluis/src/git/db/tms-wfn/hf/run_sp.py ****
#!/usr/bin/env python

import numpy, sys, os
from pyscf import lib, gto, scf, dft
from pyscf.tools import molden
from pyscf.data import radii

def read_molecule(path):

    charge = spin = 0
    with open(path, 'r') as myfile:
        output = myfile.read()
        output = output.lstrip()
        output = output.rstrip()
        output = output.split('\n')

    try:
        int(output[0])
    except ValueError:
        try:
            charge = int(output[0].split(' ')[0])
            spin = int(output[0].split(' ')[1]) - 1
        except ValueError:
            molecule = output
        else:
            molecule = '\n'.join(output[1:])
    else:
        if int(output[0]) == len(output) - 2:
            molecule = '\n'.join(output[2:])
            try:
                charge = int(output[1].split(' ')[0])
                spin = int(output[1].split(' ')[1])-1
            except ValueError:
                pass
        else:
            print "THIS IS NOT A VALID XYZ FILE"

    return (molecule, charge, spin)

directory = '../../tms/'
files = [i for i in os.listdir(directory) if i.endswith('.xyz')]

for filename in files:

    name = filename[:-8]
    mol = gto.Mole()
    (mol.atom, charge, spin) = read_molecule(directory+filename)
    mol.basis = 'aug-cc-pvtz'
    mol.charge = charge
    mol.spin = spin
    mol.output = name+'.out'
    mol.symmetry = 0
    mol.max_memory = 10000
    mol.verbose = 4
    mol.build()

    mf = scf.RHF(mol) 
    mf.max_cycle = 120
    mf.chkfile = name+'.chk'
    mf = scf.addons.remove_linear_dep_(mf)
    mf.kernel()

    dm = mf.make_rdm1()
    nao = mol.nao_nr()
    unit = 2.541746
    origin = ([0.0,0.0,0.0])
    charges = mol.atom_charges()
    coords  = mol.atom_coords()
    mol.set_common_orig(origin)
    r2 = mol.intor_symmetric('int1e_r2')
    r2 = numpy.einsum('ij,ji->', r2, dm)
    lib.logger.info(mf,'Electronic spatial extent <R**2> (au): %.4f', r2)

    lib.logger.info(mf,'* Multipoles in the independent field-basis, Gauge -> (0,0,0)')
    ao_dip = mol.intor_symmetric('int1e_r', comp=3)
    el_dip = numpy.einsum('xij,ji->x', ao_dip, dm)
    lib.logger.info(mf,'Electronic Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *el_dip*unit)
    nucl_dip = numpy.einsum('i,ix->x', charges, coords)
    lib.logger.info(mf,'Nuclear Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *nucl_dip*unit)
    mol_dip = (nucl_dip - el_dip) * unit
    lib.logger.info(mf,'Total Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *mol_dip)

    lib.logger.info(mf,'Quadrupole moments (Debye-Angs)')
    rr = mol.intor_symmetric('int1e_rr', comp=9).reshape(3,3,nao,nao)
    rr = -1.0*numpy.einsum('xyij,ji->xy', rr, dm)
    rr += numpy.einsum('z,zx,zy->xy', charges, coords, coords)
    rr = rr*unit*lib.param.BOHR
    lib.logger.info(mf,'Total Quadrupole moments (XX, YY, ZZ): %.4f, %.4f, %.4f', \
    rr[0,0], rr[1,1], rr[2,2])
    lib.logger.info(mf,'Total Quadrupole moments (XY, XZ, YZ): %.4f, %.4f, %.4f', \
    rr[0,1], rr[0,2], rr[1,2])
 
    lib.logger.info(mf,'Octupole moments (Debye-Angs**2)')
    rrr = mol.intor_symmetric('int1e_rrr', comp=27).reshape(3,3,3,nao,nao)
    rrr = -1.0*numpy.einsum('xyzij,ji->xyz', rrr, dm)
    rrr += numpy.einsum('z,zx,zy,zk->xyk', charges, coords, coords, coords)
    rrr = rrr*unit*lib.param.BOHR**2
    lib.logger.info(mf,'Total Octupole moments (XXX, YYY, ZZZ, XYY): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,0], rrr[1,1,1], rrr[2,2,2], rrr[0,1,1])
    lib.logger.info(mf,'Total Octupole moments (XXY, XXZ, XZZ, YZZ): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,1], rrr[0,0,2], rrr[0,2,2], rrr[1,2,2])
    lib.logger.info(mf,'Total Octupole moments (YYZ, XYZ): %.4f, %.4f', rrr[1,1,2], rrr[0,1,2])

    lib.logger.info(mf,'Hexadecapole moments (Debye-Angs**3)')
    rrrr = mol.intor_symmetric('int1e_rrrr', comp=81).reshape(3,3,3,3,nao,nao)
    rrrr = -1.0*numpy.einsum('xyzwij,ji->xyzw', rrrr, dm)
    rrrr += numpy.einsum('z,zx,zy,zk,zw->xykw', charges, coords, coords, coords, coords)
    rrrr = rrrr*unit*lib.param.BOHR**3
    lib.logger.info(mf,'Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,0], rrrr[1,1,1,1], rrrr[2,2,2,2], rrrr[0,0,0,1])
    lib.logger.info(mf,'Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,2], rrrr[1,1,1,0], rrrr[1,1,1,2], rrrr[2,2,2,0])
    lib.logger.info(mf,'Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): %.4f, %.4f, %.4f, %.4f', \
    rrrr[2,2,2,1], rrrr[0,0,1,1], rrrr[0,0,2,2], rrrr[1,1,2,2])
    lib.logger.info(mf,'Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): %.4f, %.4f, %.4f', \
    rrrr[0,0,1,2], rrrr[1,1,0,2], rrrr[2,2,0,1])
     
    coeff = mf.mo_coeff[:,mf.mo_occ>0]
    occ = mf.mo_occ[mf.mo_occ>0]
    energy = mf.mo_energy[mf.mo_occ>0]
    den_file = name+'.mol'
    fspt = open(den_file,'w')
    molden.header(mol, fspt)
    molden.orbital_coeff(mol, fspt, coeff, ene=energy, occ=occ) 
    fspt.close()                    
    cmd = '/home/jluis/bin/molden2aim '+name
    os.system(cmd)
    den_file = name+'.wfn'
    fspt = open(den_file,'a')
    fspt.write('RHF\n')
    fspt.close()                    

    pmd_file = name+'.pmd'
    fspt = open(pmd_file,'w')
    fspt.write('%s.wfn\n' % (name))
    if (mol.symmetry == False):
        fspt.write('nosymmetry\n')
    fspt.write('tes\n')
    fspt.write('  epsiscp 0.220\n')
    fspt.write('  radialquad 7\n')
    fspt.write('  rmapping 2\n')
    fspt.write('  lmax 10\n')
    fspt.write('  nr 551\n')
    fspt.write('  lebedev 5810\n')
    fspt.write('  betasphere\n')
    for ia in range(mol.natm):
        symb = mol.atom_pure_symbol(ia)
        inuc = lib.parameters.NUC[symb]
        betarad = radii.COVALENT[inuc]/3.5
        fspt.write('  betaradw %d %1.3f\n' % ((ia+1),betarad))
    fspt.write('  radialquadbeta 7\n')
    fspt.write('  rmappingbeta 3\n')
    fspt.write('  lmaxbeta 8\n')
    fspt.write('  nrb 451\n')
    fspt.write('  lebedevbeta 3074\n')
    fspt.write('  dafh\n')
    fspt.write('endtes')
    fspt.close()                    

    cmd = 'rm '+name+'.mol'
    os.system(cmd)
#INFO: ******************** input file end ********************


System: ('Linux', 'cromo', '4.9.0-0.bpo.3-amd64', '#1 SMP Debian 4.9.30-2+deb9u5~bpo8+1 (2017-09-28)', 'x86_64', '')  Threads 4
Python 2.7.14 (default, Apr 10 2018, 19:21:27) 
[GCC 7.3.0]
numpy 1.14.2  scipy 1.0.1
Date: Sun Jul  1 19:45:59 2018
PySCF version 1.5
PySCF path  /home/jluis/src/pyscf/pyscf
GIT ORIG_HEAD 1ca9fa9a79cffe36c02a6597649cc8e4258362c9
GIT HEAD      ref: refs/heads/master
GIT master branch  2a04e98fd7e076282a2b183302d17fc6af3d78e6

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_TMPDIR /scratch-ssd/jluis
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 5
[INPUT] num. electrons = 126
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry 0 subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Ti     0.000000000000   0.000000000000   0.036478000000 AA    0.000000000000   0.000000000000   0.068933429572 Bohr
[INPUT]  2 Cl     1.250898000000   1.250898000000   1.284405000000 AA    2.363854629766   2.363854629766   2.427173683022 Bohr
[INPUT]  3 Cl    -1.250898000000  -1.250898000000   1.284405000000 AA   -2.363854629766  -2.363854629766   2.427173683022 Bohr
[INPUT]  4 Br    -1.337034000000   1.337034000000  -1.302644000000 AA   -2.526628079232   2.526628079232  -2.461640397808 Bohr
[INPUT]  5 Br     1.337034000000  -1.337034000000  -1.302644000000 AA    2.526628079232  -2.526628079232  -2.461640397808 Bohr

nuclear repulsion = 1093.2770749243
number of shells = 68
number of NR pGTOs = 560
number of NR cGTOs = 311
basis = aug-cc-pvtz
ecp = {}
CPU time:      7984.10


******** <class 'pyscf.scf.hf.RHF'> flags ********
method = RHF
initial guess = minao
damping factor = 0
level shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
DIIS start cycle = 1
DIIS space = 8
SCF tol = 1e-09
SCF gradient tol = None
max. SCF cycles = 120
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = ticl2br2.chk
max_memory 10000 MB (current use 152 MB)
Set gradient conv threshold to 3.16228e-05
init E= -6910.70732631012
  HOMO = -0.402606674964325  LUMO = 0.00476285183776701
cycle= 1 E= -6912.31900052312  delta_E= -1.61  |g|= 1.08  |ddm|= 4.59
  HOMO = -0.462413735268671  LUMO = -0.346978487340703
cycle= 2 E= -6910.44414723016  delta_E= 1.87  |g|= 3.77  |ddm|= 12.4
  HOMO = -0.443978183835432  LUMO = -0.0939568919555845
cycle= 3 E= -6912.62008974738  delta_E= -2.18  |g|= 0.303  |ddm|= 8.01
  HOMO = -0.428095135823607  LUMO = -0.00431504209055953
cycle= 4 E= -6912.64299883516  delta_E= -0.0229  |g|= 0.0423  |ddm|= 0.392
  HOMO = -0.432648938886627  LUMO = 0.00301949988518981
cycle= 5 E= -6912.64373009963  delta_E= -0.000731  |g|= 0.0164  |ddm|= 0.422
  HOMO = -0.431626128853835  LUMO = 0.00159304255980648
cycle= 6 E= -6912.64392766302  delta_E= -0.000198  |g|= 0.00717  |ddm|= 0.0732
  HOMO = -0.432421438525912  LUMO = 0.00231313777461911
cycle= 7 E= -6912.64398252823  delta_E= -5.49e-05  |g|= 0.00364  |ddm|= 0.0274
  HOMO = -0.432406503628873  LUMO = 0.00323313793976329
cycle= 8 E= -6912.64398994695  delta_E= -7.42e-06  |g|= 0.000662  |ddm|= 0.0296
  HOMO = -0.432427122090266  LUMO = 0.00343994285483779
cycle= 9 E= -6912.64399030278  delta_E= -3.56e-07  |g|= 0.000147  |ddm|= 0.00315
  HOMO = -0.432440639598291  LUMO = 0.00343902982230815
cycle= 10 E= -6912.64399032082  delta_E= -1.8e-08  |g|= 7.59e-05  |ddm|= 0.000339
  HOMO = -0.43243978861904  LUMO = 0.0034519805402355
cycle= 11 E= -6912.64399032606  delta_E= -5.24e-09  |g|= 3.32e-05  |ddm|= 0.000201
  HOMO = -0.432443143082584  LUMO = 0.00345731233933861
cycle= 12 E= -6912.64399032779  delta_E= -1.73e-09  |g|= 1.11e-05  |ddm|= 0.000135
  HOMO = -0.432443365391976  LUMO = 0.00345725153875935
cycle= 13 E= -6912.64399032793  delta_E= -1.36e-10  |g|= 2.54e-06  |ddm|= 3.93e-05
  HOMO = -0.432443417165171  LUMO = 0.00345760400843189
Extra cycle  E= -6912.64399032794  delta_E= -1.64e-11  |g|= 1.46e-06  |ddm|= 4.69e-06
converged SCF energy = -6912.64399032794
Electronic spatial extent <R**2> (au): 2080.0110
* Multipoles in the independent field-basis, Gauge -> (0,0,0)
Electronic Dipole moment(X, Y, Z, Debye): -0.0000, 0.0000, -224.2663
Nuclear Dipole moment(X, Y, Z, Debye): 0.0000, 0.0000, -224.3711
Total Dipole moment(X, Y, Z, Debye): 0.0000, -0.0000, -0.1048
Quadrupole moments (Debye-Angs)
Total Quadrupole moments (XX, YY, ZZ): -81.4757, -81.4757, -81.4675
Total Quadrupole moments (XY, XZ, YZ): -0.4768, -0.0000, 0.0000
Octupole moments (Debye-Angs**2)
Total Octupole moments (XXX, YYY, ZZZ, XYY): 0.0000, -0.0000, 43.6498, 0.0000
Total Octupole moments (XXY, XXZ, XZZ, YZZ): -0.0000, 13.6543, -0.0000, 0.0000
Total Octupole moments (YYZ, XYZ): 13.6543, -0.4902
Hexadecapole moments (Debye-Angs**3)
Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): -727.6971, -727.6971, -720.6129, 75.2724
Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): -0.0000, 75.2724, 0.0000, -0.0000
Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): 0.0000, -237.6994, -236.6225, -236.6225
Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): 0.0000, -0.0000, 22.5976
