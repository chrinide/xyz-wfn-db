#INFO: **** input file is /home/jluis/src/git/db/tms-wfn/hf/run_sp.py ****
#!/usr/bin/env python

import numpy, sys, os
from pyscf import lib, gto, scf, dft
from pyscf.tools import molden
from pyscf.data import radii

def read_molecule(path):

    charge = spin = 0
    with open(path, 'r') as myfile:
        output = myfile.read()
        output = output.lstrip()
        output = output.rstrip()
        output = output.split('\n')

    try:
        int(output[0])
    except ValueError:
        try:
            charge = int(output[0].split(' ')[0])
            spin = int(output[0].split(' ')[1]) - 1
        except ValueError:
            molecule = output
        else:
            molecule = '\n'.join(output[1:])
    else:
        if int(output[0]) == len(output) - 2:
            molecule = '\n'.join(output[2:])
            try:
                charge = int(output[1].split(' ')[0])
                spin = int(output[1].split(' ')[1])-1
            except ValueError:
                pass
        else:
            print "THIS IS NOT A VALID XYZ FILE"

    return (molecule, charge, spin)

directory = '../../tms/'
files = [i for i in os.listdir(directory) if i.endswith('.xyz')]

for filename in files:

    name = filename[:-8]
    mol = gto.Mole()
    (mol.atom, charge, spin) = read_molecule(directory+filename)
    mol.basis = 'aug-cc-pvtz'
    mol.charge = charge
    mol.spin = spin
    mol.output = name+'.out'
    mol.symmetry = 0
    mol.max_memory = 10000
    mol.verbose = 4
    mol.build()

    mf = scf.RHF(mol) 
    mf.max_cycle = 120
    mf.chkfile = name+'.chk'
    mf = scf.addons.remove_linear_dep_(mf)
    mf.kernel()

    dm = mf.make_rdm1()
    nao = mol.nao_nr()
    unit = 2.541746
    origin = ([0.0,0.0,0.0])
    charges = mol.atom_charges()
    coords  = mol.atom_coords()
    mol.set_common_orig(origin)
    r2 = mol.intor_symmetric('int1e_r2')
    r2 = numpy.einsum('ij,ji->', r2, dm)
    lib.logger.info(mf,'Electronic spatial extent <R**2> (au): %.4f', r2)

    lib.logger.info(mf,'* Multipoles in the independent field-basis, Gauge -> (0,0,0)')
    ao_dip = mol.intor_symmetric('int1e_r', comp=3)
    el_dip = numpy.einsum('xij,ji->x', ao_dip, dm)
    lib.logger.info(mf,'Electronic Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *el_dip*unit)
    nucl_dip = numpy.einsum('i,ix->x', charges, coords)
    lib.logger.info(mf,'Nuclear Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *nucl_dip*unit)
    mol_dip = (nucl_dip - el_dip) * unit
    lib.logger.info(mf,'Total Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *mol_dip)

    lib.logger.info(mf,'Quadrupole moments (Debye-Angs)')
    rr = mol.intor_symmetric('int1e_rr', comp=9).reshape(3,3,nao,nao)
    rr = -1.0*numpy.einsum('xyij,ji->xy', rr, dm)
    rr += numpy.einsum('z,zx,zy->xy', charges, coords, coords)
    rr = rr*unit*lib.param.BOHR
    lib.logger.info(mf,'Total Quadrupole moments (XX, YY, ZZ): %.4f, %.4f, %.4f', \
    rr[0,0], rr[1,1], rr[2,2])
    lib.logger.info(mf,'Total Quadrupole moments (XY, XZ, YZ): %.4f, %.4f, %.4f', \
    rr[0,1], rr[0,2], rr[1,2])
 
    lib.logger.info(mf,'Octupole moments (Debye-Angs**2)')
    rrr = mol.intor_symmetric('int1e_rrr', comp=27).reshape(3,3,3,nao,nao)
    rrr = -1.0*numpy.einsum('xyzij,ji->xyz', rrr, dm)
    rrr += numpy.einsum('z,zx,zy,zk->xyk', charges, coords, coords, coords)
    rrr = rrr*unit*lib.param.BOHR**2
    lib.logger.info(mf,'Total Octupole moments (XXX, YYY, ZZZ, XYY): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,0], rrr[1,1,1], rrr[2,2,2], rrr[0,1,1])
    lib.logger.info(mf,'Total Octupole moments (XXY, XXZ, XZZ, YZZ): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,1], rrr[0,0,2], rrr[0,2,2], rrr[1,2,2])
    lib.logger.info(mf,'Total Octupole moments (YYZ, XYZ): %.4f, %.4f', rrr[1,1,2], rrr[0,1,2])

    lib.logger.info(mf,'Hexadecapole moments (Debye-Angs**3)')
    rrrr = mol.intor_symmetric('int1e_rrrr', comp=81).reshape(3,3,3,3,nao,nao)
    rrrr = -1.0*numpy.einsum('xyzwij,ji->xyzw', rrrr, dm)
    rrrr += numpy.einsum('z,zx,zy,zk,zw->xykw', charges, coords, coords, coords, coords)
    rrrr = rrrr*unit*lib.param.BOHR**3
    lib.logger.info(mf,'Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,0], rrrr[1,1,1,1], rrrr[2,2,2,2], rrrr[0,0,0,1])
    lib.logger.info(mf,'Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,2], rrrr[1,1,1,0], rrrr[1,1,1,2], rrrr[2,2,2,0])
    lib.logger.info(mf,'Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): %.4f, %.4f, %.4f, %.4f', \
    rrrr[2,2,2,1], rrrr[0,0,1,1], rrrr[0,0,2,2], rrrr[1,1,2,2])
    lib.logger.info(mf,'Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): %.4f, %.4f, %.4f', \
    rrrr[0,0,1,2], rrrr[1,1,0,2], rrrr[2,2,0,1])
     
    coeff = mf.mo_coeff[:,mf.mo_occ>0]
    occ = mf.mo_occ[mf.mo_occ>0]
    energy = mf.mo_energy[mf.mo_occ>0]
    den_file = name+'.mol'
    fspt = open(den_file,'w')
    molden.header(mol, fspt)
    molden.orbital_coeff(mol, fspt, coeff, ene=energy, occ=occ) 
    fspt.close()                    
    cmd = '/home/jluis/bin/molden2aim '+name
    os.system(cmd)
    den_file = name+'.wfn'
    fspt = open(den_file,'a')
    fspt.write('RHF\n')
    fspt.close()                    

    pmd_file = name+'.pmd'
    fspt = open(pmd_file,'w')
    fspt.write('%s.wfn\n' % (name))
    if (mol.symmetry == False):
        fspt.write('nosymmetry\n')
    fspt.write('tes\n')
    fspt.write('  epsiscp 0.220\n')
    fspt.write('  radialquad 7\n')
    fspt.write('  rmapping 2\n')
    fspt.write('  lmax 10\n')
    fspt.write('  nr 551\n')
    fspt.write('  lebedev 5810\n')
    fspt.write('  betasphere\n')
    for ia in range(mol.natm):
        symb = mol.atom_pure_symbol(ia)
        inuc = lib.parameters.NUC[symb]
        betarad = radii.COVALENT[inuc]/3.5
        fspt.write('  betaradw %d %1.3f\n' % ((ia+1),betarad))
    fspt.write('  radialquadbeta 7\n')
    fspt.write('  rmappingbeta 3\n')
    fspt.write('  lmaxbeta 8\n')
    fspt.write('  nrb 451\n')
    fspt.write('  lebedevbeta 3074\n')
    fspt.write('  dafh\n')
    fspt.write('endtes')
    fspt.close()                    

    cmd = 'rm '+name+'.mol'
    os.system(cmd)
#INFO: ******************** input file end ********************


System: ('Linux', 'cromo', '4.9.0-0.bpo.3-amd64', '#1 SMP Debian 4.9.30-2+deb9u5~bpo8+1 (2017-09-28)', 'x86_64', '')  Threads 4
Python 2.7.14 (default, Apr 10 2018, 19:21:27) 
[GCC 7.3.0]
numpy 1.14.2  scipy 1.0.1
Date: Sun Jul  1 19:50:15 2018
PySCF version 1.5
PySCF path  /home/jluis/src/pyscf/pyscf
GIT ORIG_HEAD 1ca9fa9a79cffe36c02a6597649cc8e4258362c9
GIT HEAD      ref: refs/heads/master
GIT master branch  2a04e98fd7e076282a2b183302d17fc6af3d78e6

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_TMPDIR /scratch-ssd/jluis
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 9
[INPUT] num. electrons = 48
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry 0 subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Zn     0.000068000000   0.000000000000  -0.000450000000 AA    0.000128501376   0.000000000000  -0.000850376756 Bohr
[INPUT]  2 C      0.000002000000   1.943658000000  -0.000188000000 AA    0.000003779452   3.672981299820  -0.000355268511 Bohr
[INPUT]  3 H     -0.000009000000   2.348375000000   1.023821000000 AA   -0.000017007535   4.437785587775   1.934741290578 Bohr
[INPUT]  4 H      0.886730000000   2.348732000000  -0.512064000000 AA    1.675676846436   4.438460220002  -0.967660718249 Bohr
[INPUT]  5 H     -0.886757000000   2.348660000000  -0.512069000000 AA   -1.675727869041   4.438324159721  -0.967670166880 Bohr
[INPUT]  6 C      0.000002000000  -1.943658000000  -0.000188000000 AA    0.000003779452  -3.672981299820  -0.000355268511 Bohr
[INPUT]  7 H      0.886730000000  -2.348732000000  -0.512064000000 AA    1.675676846436  -4.438460220002  -0.967660718249 Bohr
[INPUT]  8 H     -0.000009000000  -2.348375000000   1.023821000000 AA   -0.000017007535  -4.437785587775   1.934741290578 Bohr
[INPUT]  9 H     -0.886757000000  -2.348660000000  -0.512069000000 AA   -1.675727869041  -4.438324159721  -0.967670166880 Bohr

nuclear repulsion = 164.470414252779
number of shells = 94
number of NR pGTOs = 422
number of NR cGTOs = 323
basis = aug-cc-pvtz
ecp = {}
CPU time:      8997.73


******** <class 'pyscf.scf.hf.RHF'> flags ********
method = RHF
initial guess = minao
damping factor = 0
level shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
DIIS start cycle = 1
DIIS space = 8
SCF tol = 1e-09
SCF gradient tol = None
max. SCF cycles = 120
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = znc2h6.chk
max_memory 10000 MB (current use 152 MB)
Set gradient conv threshold to 3.16228e-05
init E= -1856.82927695717
  HOMO = -0.281294450709517  LUMO = -0.00239558336577196
cycle= 1 E= -1857.037116126  delta_E= -0.208  |g|= 0.479  |ddm|=  3.5
  HOMO = -0.337032910250453  LUMO = 0.0222743585283201
cycle= 2 E= -1857.06492995831  delta_E= -0.0278  |g|= 0.456  |ddm|= 0.522
  HOMO = -0.356265881583839  LUMO = 0.0223051838594236
cycle= 3 E= -1857.0774002828  delta_E= -0.0125  |g|= 0.19  |ddm|= 0.36
  HOMO = -0.365456100775746  LUMO = 0.022321528489022
cycle= 4 E= -1857.07986854349  delta_E= -0.00247  |g|= 0.0389  |ddm|= 0.147
  HOMO = -0.361167765800846  LUMO = 0.0225392894700452
cycle= 5 E= -1857.08005838604  delta_E= -0.00019  |g|= 0.00392  |ddm|= 0.0332
  HOMO = -0.361972539253012  LUMO = 0.0224843198210844
cycle= 6 E= -1857.08006779106  delta_E= -9.41e-06  |g|= 0.00071  |ddm|= 0.00929
  HOMO = -0.362062044132809  LUMO = 0.0224921611498944
cycle= 7 E= -1857.08006817099  delta_E= -3.8e-07  |g|= 0.000151  |ddm|= 0.00338
  HOMO = -0.362109828500765  LUMO = 0.0224881027300189
cycle= 8 E= -1857.08006818476  delta_E= -1.38e-08  |g|= 1.99e-05  |ddm|= 0.000708
  HOMO = -0.362107578864836  LUMO = 0.0224879008098578
cycle= 9 E= -1857.08006818497  delta_E= -2.06e-10  |g|= 4.98e-06  |ddm|= 8.08e-05
  HOMO = -0.362107919240117  LUMO = 0.0224879477754127
Extra cycle  E= -1857.08006818497  delta_E= 3.64e-12  |g|= 4.35e-06  |ddm|= 1.22e-05
converged SCF energy = -1857.08006818497
Electronic spatial extent <R**2> (au): 370.9884
* Multipoles in the independent field-basis, Gauge -> (0,0,0)
Electronic Dipole moment(X, Y, Z, Debye): 0.0094, -0.0000, -0.0781
Nuclear Dipole moment(X, Y, Z, Debye): 0.0096, 0.0000, -0.0787
Total Dipole moment(X, Y, Z, Debye): 0.0002, 0.0000, -0.0006
Quadrupole moments (Debye-Angs)
Total Quadrupole moments (XX, YY, ZZ): -27.6186, -36.8301, -27.6186
Total Quadrupole moments (XY, XZ, YZ): 0.0000, 0.0000, -0.0000
Octupole moments (Debye-Angs**2)
Total Octupole moments (XXX, YYY, ZZZ, XYY): -0.0022, 0.0000, 0.9176, -0.0007
Total Octupole moments (XXY, XXZ, XZZ, YZZ): 0.0000, -0.8864, -0.0007, 0.0000
Total Octupole moments (YYZ, XYZ): 0.0087, -0.0000
Hexadecapole moments (Debye-Angs**3)
Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): -43.5730, -514.6834, -43.5729, 0.0000
Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): 0.0001, 0.0000, -0.0000, -0.0000
Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): -0.0000, -82.0042, -14.5243, -82.0063
Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): -0.0000, -0.0000, -0.0000
