#INFO: **** input file is /home/jluis/src/git/db/molecules-wfn/hf/run_sp.py ****
#!/usr/bin/env python

import numpy, sys, os
from pyscf import lib, gto, scf, dft
from pyscf.tools import molden
from pyscf.data import radii

def read_molecule(path):

    charge = spin = 0
    with open(path, 'r') as myfile:
        output = myfile.read()
        output = output.lstrip()
        output = output.rstrip()
        output = output.split('\n')

    try:
        int(output[0])
    except ValueError:
        try:
            charge = int(output[0].split(' ')[0])
            spin = int(output[0].split(' ')[1]) - 1
        except ValueError:
            molecule = output
        else:
            molecule = '\n'.join(output[1:])
    else:
        if int(output[0]) == len(output) - 2:
            molecule = '\n'.join(output[2:])
            try:
                charge = int(output[1].split(' ')[0])
                spin = int(output[1].split(' ')[1])-1
            except ValueError:
                pass
        else:
            print "THIS IS NOT A VALID XYZ FILE"

    return (molecule, charge, spin)

directory = '../../molecules/'
files = [i for i in os.listdir(directory) if i.endswith('.xyz')]

for filename in files:

    name = filename[:-8]
    mol = gto.Mole()
    (mol.atom, charge, spin) = read_molecule(directory+filename)
    mol.basis = 'aug-cc-pvtz'
    mol.charge = charge
    mol.spin = spin
    mol.output = name+'.out'
    mol.symmetry = 0
    mol.max_memory = 10000
    mol.verbose = 4
    mol.build()

    mf = scf.RHF(mol) 
    mf = scf.addons.remove_linear_dep_(mf)
    mf.max_cycle = 120
    mf.chkfile = name+'.chk'
    mf.kernel()

    dm = mf.make_rdm1()
    nao = mol.nao_nr()
    unit = 2.541746
    origin = ([0.0,0.0,0.0])
    charges = mol.atom_charges()
    coords  = mol.atom_coords()
    mol.set_common_orig(origin)
    r2 = mol.intor_symmetric('int1e_r2')
    r2 = numpy.einsum('ij,ji->', r2, dm)
    lib.logger.info(mf,'Electronic spatial extent <R**2> (au): %.4f', r2)

    lib.logger.info(mf,'* Multipoles in the independent field-basis, Gauge -> (0,0,0)')
    ao_dip = mol.intor_symmetric('int1e_r', comp=3)
    el_dip = numpy.einsum('xij,ji->x', ao_dip, dm)
    lib.logger.info(mf,'Electronic Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *el_dip*unit)
    nucl_dip = numpy.einsum('i,ix->x', charges, coords)
    lib.logger.info(mf,'Nuclear Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *nucl_dip*unit)
    mol_dip = (nucl_dip - el_dip) * unit
    lib.logger.info(mf,'Total Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *mol_dip)

    lib.logger.info(mf,'Quadrupole moments (Debye-Angs)')
    rr = mol.intor_symmetric('int1e_rr', comp=9).reshape(3,3,nao,nao)
    rr = -1.0*numpy.einsum('xyij,ji->xy', rr, dm)
    rr += numpy.einsum('z,zx,zy->xy', charges, coords, coords)
    rr = rr*unit*lib.param.BOHR
    lib.logger.info(mf,'Total Quadrupole moments (XX, YY, ZZ): %.4f, %.4f, %.4f', \
    rr[0,0], rr[1,1], rr[2,2])
    lib.logger.info(mf,'Total Quadrupole moments (XY, XZ, YZ): %.4f, %.4f, %.4f', \
    rr[0,1], rr[0,2], rr[1,2])
 
    lib.logger.info(mf,'Octupole moments (Debye-Angs**2)')
    rrr = mol.intor_symmetric('int1e_rrr', comp=27).reshape(3,3,3,nao,nao)
    rrr = -1.0*numpy.einsum('xyzij,ji->xyz', rrr, dm)
    rrr += numpy.einsum('z,zx,zy,zk->xyk', charges, coords, coords, coords)
    rrr = rrr*unit*lib.param.BOHR**2
    lib.logger.info(mf,'Total Octupole moments (XXX, YYY, ZZZ, XYY): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,0], rrr[1,1,1], rrr[2,2,2], rrr[0,1,1])
    lib.logger.info(mf,'Total Octupole moments (XXY, XXZ, XZZ, YZZ): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,1], rrr[0,0,2], rrr[0,2,2], rrr[1,2,2])
    lib.logger.info(mf,'Total Octupole moments (YYZ, XYZ): %.4f, %.4f', rrr[1,1,2], rrr[0,1,2])

    lib.logger.info(mf,'Hexadecapole moments (Debye-Angs**3)')
    rrrr = mol.intor_symmetric('int1e_rrrr', comp=81).reshape(3,3,3,3,nao,nao)
    rrrr = -1.0*numpy.einsum('xyzwij,ji->xyzw', rrrr, dm)
    rrrr += numpy.einsum('z,zx,zy,zk,zw->xykw', charges, coords, coords, coords, coords)
    rrrr = rrrr*unit*lib.param.BOHR**3
    lib.logger.info(mf,'Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,0], rrrr[1,1,1,1], rrrr[2,2,2,2], rrrr[0,0,0,1])
    lib.logger.info(mf,'Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,2], rrrr[1,1,1,0], rrrr[1,1,1,2], rrrr[2,2,2,0])
    lib.logger.info(mf,'Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): %.4f, %.4f, %.4f, %.4f', \
    rrrr[2,2,2,1], rrrr[0,0,1,1], rrrr[0,0,2,2], rrrr[1,1,2,2])
    lib.logger.info(mf,'Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): %.4f, %.4f, %.4f', \
    rrrr[0,0,1,2], rrrr[1,1,0,2], rrrr[2,2,0,1])
     
    coeff = mf.mo_coeff[:,mf.mo_occ>0]
    occ = mf.mo_occ[mf.mo_occ>0]
    energy = mf.mo_energy[mf.mo_occ>0]
    den_file = name+'.mol'
    fspt = open(den_file,'w')
    molden.header(mol, fspt)
    molden.orbital_coeff(mol, fspt, coeff, ene=energy, occ=occ) 
    fspt.close()                    
    cmd = '/home/jluis/bin/molden2aim '+name
    os.system(cmd)
    den_file = name+'.wfn'
    fspt = open(den_file,'a')
    fspt.write('RHF\n')
    fspt.close()                    

    pmd_file = name+'.pmd'
    fspt = open(pmd_file,'w')
    fspt.write('%s.wfn\n' % (name))
    if (mol.symmetry == False):
        fspt.write('nosymmetry\n')
    fspt.write('tes\n')
    fspt.write('  epsiscp 0.220\n')
    fspt.write('  radialquad 7\n')
    fspt.write('  rmapping 2\n')
    fspt.write('  lmax 10\n')
    fspt.write('  nr 551\n')
    fspt.write('  lebedev 5810\n')
    fspt.write('  betasphere\n')
    for ia in range(mol.natm):
        symb = mol.atom_pure_symbol(ia)
        inuc = lib.parameters.NUC[symb]
        betarad = radii.COVALENT[inuc]/3.5
        fspt.write('  betaradw %d %1.3f\n' % ((ia+1),betarad))
    fspt.write('  radialquadbeta 7\n')
    fspt.write('  rmappingbeta 3\n')
    fspt.write('  lmaxbeta 8\n')
    fspt.write('  nrb 451\n')
    fspt.write('  lebedevbeta 3074\n')
    fspt.write('  dafh\n')
    fspt.write('endtes')
    fspt.close()                    

    cmd = 'rm '+name+'.mol'
    os.system(cmd)
#INFO: ******************** input file end ********************


System: ('Linux', 'silicio', '3.16.0-4-amd64', '#1 SMP Debian 3.16.51-3 (2017-12-13)', 'x86_64', '')  Threads 12
Python 2.7.14 (default, Apr  9 2018, 16:34:43) 
[GCC 7.3.0]
numpy 1.14.2  scipy 1.0.1
Date: Wed Jun 27 23:08:43 2018
PySCF version 1.5
PySCF path  /home/jluis/src/pyscf/pyscf
GIT ORIG_HEAD f2dbb26d09ae5148fbf5975669a994500ac7a4c9
GIT HEAD      ref: refs/heads/master
GIT master branch  f2dbb26d09ae5148fbf5975669a994500ac7a4c9

[ENV] PYSCF_TMPDIR /scratch-ssd/jluis
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 64
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry 0 subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C     -2.962124000000   1.256634000000  -0.013100000000 AA   -5.597603107001   2.374694098817  -0.024755412232 Bohr
[INPUT]  2 C     -1.627967000000   1.271844000000   0.013159000000 AA   -3.076411769830   2.403436833171   0.024866906073 Bohr
[INPUT]  3 Cl    -3.948378000000   1.963621000000   1.185082000000 AA   -7.461353056258   3.710705902445   2.239480415152 Bohr
[INPUT]  4 F     -3.624576000000   0.671510000000  -1.004504000000 AA   -6.849455957672   1.268969989907  -1.898237451030 Bohr
[INPUT]  5 F     -0.965521000000   1.856899000000   1.004605000000 AA   -1.824570257516   3.509030550979   1.898428313369 Bohr
[INPUT]  6 Cl    -0.641703000000   0.565242000000  -1.185242000000 AA   -1.212642923312   1.068152574101  -2.239782771332 Bohr

nuclear repulsion = 350.370628146758
number of shells = 78
number of NR pGTOs = 382
number of NR cGTOs = 284
basis = aug-cc-pvtz
ecp = {}
CPU time:    119809.46


******** <class 'pyscf.scf.hf.RHF'> flags ********
method = RHF
initial guess = minao
damping factor = 0
level shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
DIIS start cycle = 1
DIIS space = 8
SCF tol = 1e-09
SCF gradient tol = None
max. SCF cycles = 120
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = c2f2cl2-t.chk
max_memory 10000 MB (current use 165 MB)
Set gradient conv threshold to 3.16228e-05
init E= -1195.09483457993
  HOMO = -0.207702308694574  LUMO = 0.0377226240940811
cycle= 1 E= -1193.56481894821  delta_E= 1.53  |g|= 0.745  |ddm|= 2.56
  HOMO = -0.448182618797077  LUMO = 0.0216522124743455
cycle= 2 E= -1193.64410736202  delta_E= -0.0793  |g|= 0.504  |ddm|= 0.728
  HOMO = -0.37715085504181  LUMO = 0.0510856594786389
cycle= 3 E= -1193.69233804695  delta_E= -0.0482  |g|= 0.0768  |ddm|= 0.281
  HOMO = -0.376813336858835  LUMO = 0.0515535818799554
cycle= 4 E= -1193.69425295363  delta_E= -0.00191  |g|= 0.0242  |ddm|= 0.0899
  HOMO = -0.379455182038212  LUMO = 0.0513878275121413
cycle= 5 E= -1193.69443740956  delta_E= -0.000184  |g|= 0.0072  |ddm|= 0.0221
  HOMO = -0.378799018344118  LUMO = 0.0513778147674693
cycle= 6 E= -1193.69446057601  delta_E= -2.32e-05  |g|= 0.00221  |ddm|= 0.0084
  HOMO = -0.378678023084114  LUMO = 0.0513860339510383
cycle= 7 E= -1193.69446292829  delta_E= -2.35e-06  |g|= 0.000436  |ddm|= 0.00316
  HOMO = -0.378676886398407  LUMO = 0.0513849154521715
cycle= 8 E= -1193.69446302508  delta_E= -9.68e-08  |g|= 9.62e-05  |ddm|= 0.000772
  HOMO = -0.378671068646398  LUMO = 0.0513850731286519
cycle= 9 E= -1193.69446303003  delta_E= -4.95e-09  |g|= 2.32e-05  |ddm|= 0.000174
  HOMO = -0.378670525611248  LUMO = 0.051385064906905
cycle= 10 E= -1193.69446303038  delta_E= -3.42e-10  |g|= 7.21e-06  |ddm|= 4.14e-05
  HOMO = -0.378670432504738  LUMO = 0.0513850663707126
Extra cycle  E= -1193.6944630304  delta_E= -1.91e-11  |g|= 3.16e-06  |ddm|= 9.64e-06
converged SCF energy = -1193.6944630304
Electronic spatial extent <R**2> (au): 2453.8548
* Multipoles in the independent field-basis, Gauge -> (0,0,0)
Electronic Dipole moment(X, Y, Z, Debye): -705.5080, 388.6618, -0.0070
Nuclear Dipole moment(X, Y, Z, Debye): -705.5080, 388.6619, -0.0070
Total Dipole moment(X, Y, Z, Debye): 0.0000, 0.0001, -0.0000
Quadrupole moments (Debye-Angs)
Total Quadrupole moments (XX, YY, ZZ): -46.4572, -45.7075, -46.0472
Total Quadrupole moments (XY, XZ, YZ): -1.5137, -2.5650, -0.3082
Octupole moments (Debye-Angs**2)
Total Octupole moments (XXX, YYY, ZZZ, XYY): 319.8636, -173.3687, 0.0019, 101.0729
Total Octupole moments (XXY, XXZ, XZZ, YZZ): -51.7890, 11.7742, 105.6813, -58.2189
Total Octupole moments (YYZ, XYZ): -0.7770, -2.5361
Hexadecapole moments (Debye-Angs**3)
Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): -2049.2845, -577.4641, -304.6246, 434.7869
Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): 51.4931, 453.6293, -79.1591, 95.0427
Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): -72.1259, -414.9621, -381.0497, -145.2281
Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): -5.7295, 29.1015, 145.2271
