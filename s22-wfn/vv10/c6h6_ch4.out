#INFO: **** input file is /home/jluis/src/git/db/s22-wfn/vv10/run_sp.py ****
#!/usr/bin/env python

import numpy, sys, os
from pyscf import lib, gto, scf, dft
from pyscf.tools import molden
from pyscf.data import radii

def read_molecule(path):

    charge = spin = 0
    with open(path, 'r') as myfile:
        output = myfile.read()
        output = output.lstrip()
        output = output.rstrip()
        output = output.split('\n')

    try:
        int(output[0])
    except ValueError:
        try:
            charge = int(output[0].split(' ')[0])
            spin = int(output[0].split(' ')[1]) - 1
        except ValueError:
            molecule = output
        else:
            molecule = '\n'.join(output[1:])
    else:
        if int(output[0]) == len(output) - 2:
            molecule = '\n'.join(output[2:])
            try:
                charge = int(output[1].split(' ')[0])
                spin = int(output[1].split(' ')[1])-1
            except ValueError:
                pass
        else:
            print "THIS IS NOT A VALID XYZ FILE"

    return (molecule, charge, spin)

directory = '../../s22/'
files = [i for i in os.listdir(directory) if i.endswith('.xyz')]

for filename in files:

    name = filename[:-4]
    mol = gto.Mole()
    (mol.atom, charge, spin) = read_molecule(directory+filename)
    mol.basis = 'aug-cc-pvtz'
    mol.charge = charge
    mol.spin = spin
    mol.output = name+'.out'
    mol.symmetry = 0
    mol.verbose = 4
    mol.build()

    mf = dft.RKS(mol)#.density_fit() 
    #mf.with_df.auxbasis = 'aug-cc-pvtz-jkfit'
    #mf.xc = 'rpw86,pbe'
    mf.xc = 'vv10'
    mf.grids.level = 4
    mf.nlc = 'vv10'
    mf.nlcgrids.level = 2
    mf.nlcgrids.prune = dft.gen_grid.sg1_prune
    mf.max_cycle = 120
    mf.chkfile = name+'.chk'
    mf = scf.addons.remove_linear_dep_(mf)
    mf.kernel()

    dm = mf.make_rdm1()
    nao = mol.nao_nr()
    unit = 2.541746
    origin = ([0.0,0.0,0.0])
    charges = mol.atom_charges()
    coords  = mol.atom_coords()
    mol.set_common_orig(origin)
    r2 = mol.intor_symmetric('int1e_r2')
    r2 = numpy.einsum('ij,ji->', r2, dm)
    lib.logger.info(mf,'Electronic spatial extent <R**2> (au): %.4f', r2)

    lib.logger.info(mf,'* Multipoles in the independent field-basis, Gauge -> (0,0,0)')
    ao_dip = mol.intor_symmetric('int1e_r', comp=3)
    el_dip = numpy.einsum('xij,ji->x', ao_dip, dm)
    lib.logger.info(mf,'Electronic Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *el_dip*unit)
    nucl_dip = numpy.einsum('i,ix->x', charges, coords)
    lib.logger.info(mf,'Nuclear Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *nucl_dip*unit)
    mol_dip = (nucl_dip - el_dip) * unit
    lib.logger.info(mf,'Total Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *mol_dip)

    lib.logger.info(mf,'Quadrupole moments (Debye-Angs)')
    rr = mol.intor_symmetric('int1e_rr', comp=9).reshape(3,3,nao,nao)
    rr = -1.0*numpy.einsum('xyij,ji->xy', rr, dm)
    rr += numpy.einsum('z,zx,zy->xy', charges, coords, coords)
    rr = rr*unit*lib.param.BOHR
    lib.logger.info(mf,'Total Quadrupole moments (XX, YY, ZZ): %.4f, %.4f, %.4f', \
    rr[0,0], rr[1,1], rr[2,2])
    lib.logger.info(mf,'Total Quadrupole moments (XY, XZ, YZ): %.4f, %.4f, %.4f', \
    rr[0,1], rr[0,2], rr[1,2])
 
    lib.logger.info(mf,'Octupole moments (Debye-Angs**2)')
    rrr = mol.intor_symmetric('int1e_rrr', comp=27).reshape(3,3,3,nao,nao)
    rrr = -1.0*numpy.einsum('xyzij,ji->xyz', rrr, dm)
    rrr += numpy.einsum('z,zx,zy,zk->xyk', charges, coords, coords, coords)
    rrr = rrr*unit*lib.param.BOHR**2
    lib.logger.info(mf,'Total Octupole moments (XXX, YYY, ZZZ, XYY): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,0], rrr[1,1,1], rrr[2,2,2], rrr[0,1,1])
    lib.logger.info(mf,'Total Octupole moments (XXY, XXZ, XZZ, YZZ): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,1], rrr[0,0,2], rrr[0,2,2], rrr[1,2,2])
    lib.logger.info(mf,'Total Octupole moments (YYZ, XYZ): %.4f, %.4f', rrr[1,1,2], rrr[0,1,2])

    lib.logger.info(mf,'Hexadecapole moments (Debye-Angs**3)')
    rrrr = mol.intor_symmetric('int1e_rrrr', comp=81).reshape(3,3,3,3,nao,nao)
    rrrr = -1.0*numpy.einsum('xyzwij,ji->xyzw', rrrr, dm)
    rrrr += numpy.einsum('z,zx,zy,zk,zw->xykw', charges, coords, coords, coords, coords)
    rrrr = rrrr*unit*lib.param.BOHR**3
    lib.logger.info(mf,'Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,0], rrrr[1,1,1,1], rrrr[2,2,2,2], rrrr[0,0,0,1])
    lib.logger.info(mf,'Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,2], rrrr[1,1,1,0], rrrr[1,1,1,2], rrrr[2,2,2,0])
    lib.logger.info(mf,'Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): %.4f, %.4f, %.4f, %.4f', \
    rrrr[2,2,2,1], rrrr[0,0,1,1], rrrr[0,0,2,2], rrrr[1,1,2,2])
    lib.logger.info(mf,'Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): %.4f, %.4f, %.4f', \
    rrrr[0,0,1,2], rrrr[1,1,0,2], rrrr[2,2,0,1])
     
    coeff = mf.mo_coeff[:,mf.mo_occ>0]
    occ = mf.mo_occ[mf.mo_occ>0]
    energy = mf.mo_energy[mf.mo_occ>0]
    den_file = name+'.mol'
    fspt = open(den_file,'w')
    molden.header(mol, fspt)
    molden.orbital_coeff(mol, fspt, coeff, ene=energy, occ=occ) 
    fspt.close()                    
    cmd = '/home/jluis/bin/molden2aim '+name
    os.system(cmd)
    den_file = name+'.wfn'
    fspt = open(den_file,'a')
    fspt.write('RHF\n')
    fspt.close()                    

    pmd_file = name+'.pmd'
    fspt = open(pmd_file,'w')
    fspt.write('%s.wfn\n' % (name))
    if (mol.symmetry == False):
        fspt.write('nosymmetry\n')
    fspt.write('tes\n')
    fspt.write('  epsiscp 0.220\n')
    fspt.write('  xcdft 0 0 0\n')
    fspt.write('  radialquad 7\n')
    fspt.write('  rmapping 2\n')
    fspt.write('  lmax 10\n')
    fspt.write('  nr 551\n')
    fspt.write('  lebedev 5810\n')
    fspt.write('  betasphere\n')
    for ia in range(mol.natm):
        symb = mol.atom_pure_symbol(ia)
        inuc = lib.parameters.NUC[symb]
        betarad = radii.COVALENT[inuc]/3.5
        fspt.write('  betaradw %d %1.3f\n' % ((ia+1),betarad))
    fspt.write('  radialquadbeta 7\n')
    fspt.write('  rmappingbeta 3\n')
    fspt.write('  lmaxbeta 8\n')
    fspt.write('  nrb 451\n')
    fspt.write('  lebedevbeta 3074\n')
    fspt.write('  dafh\n')
    fspt.write('endtes')
    fspt.close()                    

    cmd = 'rm '+name+'.mol'
    os.system(cmd)

#INFO: ******************** input file end ********************


System: ('Linux', 'silicio', '3.16.0-4-amd64', '#1 SMP Debian 3.16.51-3 (2017-12-13)', 'x86_64', '')  Threads 12
Python 2.7.14 (default, Apr  9 2018, 16:34:43) 
[GCC 7.3.0]
numpy 1.14.2  scipy 1.0.1
Date: Tue Jul  3 17:21:40 2018
PySCF version 1.5
PySCF path  /home/jluis/src/pyscf/pyscf
GIT ORIG_HEAD f2dbb26d09ae5148fbf5975669a994500ac7a4c9
GIT HEAD      ref: refs/heads/master
GIT master branch  f2dbb26d09ae5148fbf5975669a994500ac7a4c9

[ENV] PYSCF_TMPDIR /scratch-ssd/jluis
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 52
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry 0 subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C      1.393218000000   0.036291000000  -0.633280000000 AA    2.632800451814   0.068580050787  -1.196725760165 Bohr
[INPUT]  2 C      0.728036000000  -1.188401000000  -0.633302000000 AA    1.375788648824  -2.245752416159  -1.196767334139 Bohr
[INPUT]  3 C     -0.665180000000  -1.224708000000  -0.633280000000 AA   -1.257008023538  -2.314362702564  -1.196725760165 Bohr
[INPUT]  4 C     -1.393204000000  -0.036297000000  -0.633302000000 AA   -2.632773995649  -0.068591389143  -1.196767334139 Bohr
[INPUT]  5 C     -0.728038000000   1.188416000000  -0.633280000000 AA   -1.375792428276   2.245780762051  -1.196725760165 Bohr
[INPUT]  6 C      0.665168000000   1.224699000000  -0.633302000000 AA    1.256985346825   2.314345695029  -1.196767334139 Bohr
[INPUT]  7 H      2.474274000000   0.064448000000  -0.631724000000 AA    4.675700217132   0.121789069276  -1.193785346315 Bohr
[INPUT]  8 H      1.292959000000  -2.110541000000  -0.631740000000 AA    2.443338400292  -3.988344464666  -1.193815581933 Bohr
[INPUT]  9 H     -1.181323000000  -2.175008000000  -0.631724000000 AA   -2.232376934650  -4.110169438738  -1.193785346315 Bohr
[INPUT] 10 H     -2.474261000000  -0.064465000000  -0.631740000000 AA   -4.675675650692  -0.121821194620  -1.193815581933 Bohr
[INPUT] 11 H     -1.292951000000   2.110560000000  -0.631724000000 AA   -2.443323282483   3.988380369462  -1.193785346315 Bohr
[INPUT] 12 H      1.181303000000   2.175006000000  -0.631740000000 AA    2.232339140127   4.110165659286  -1.193815581933 Bohr
[INPUT] 13 C      0.000000000000   0.000000000000   3.082619000000 AA    0.000000000000   0.000000000000   5.825305656381 Bohr
[INPUT] 14 H      0.586878000000   0.838174000000   3.446377000000 AA    1.109038688532   1.583919304731   6.512708652000 Bohr
[INPUT] 15 H     -1.019319000000   0.089164000000   3.446377000000 AA   -1.926233743566   0.168495540171   6.512708652000 Bohr
[INPUT] 16 H      0.000000000000   0.000000000000   1.996670000000 AA    0.000000000000   0.000000000000   3.773159461135 Bohr
[INPUT] 17 H      0.432441000000  -0.927338000000   3.446377000000 AA    0.817195055033  -1.752414844902   6.512708652000 Bohr

nuclear repulsion = 272.461822357353
number of shells = 181
number of NR pGTOs = 656
number of NR cGTOs = 552
basis = aug-cc-pvtz
ecp = {}
CPU time:    504181.14


******** <class 'pyscf.dft.rks.RKS'> flags ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
DIIS start cycle = 1
DIIS space = 8
SCF tol = 1e-09
SCF gradient tol = None
max. SCF cycles = 120
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = c6h6_ch4.chk
max_memory 64000 MB (current use 372 MB)
XC functionals = vv10
NLC functional = vv10
small_rho_cutoff = 1e-07
radial grids: 
    Treutler-Ahlrichs (JCP 102, 346 (M4)) radial grids
    
becke partition: Becke, JCP, 88, 2547 (1988)
pruning grids: <function nwchem_prune at 0x2b76d4a885f0>
grids dens level: 4
symmetrized grids: 0
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b76d4a88500>
** Following is NLC Grids **
radial grids: 
    Treutler-Ahlrichs (JCP 102, 346 (M4)) radial grids
    
becke partition: Becke, JCP, 88, 2547 (1988)
pruning grids: <function sg1_prune at 0x2b76d4a88578>
grids dens level: 2
symmetrized grids: 0
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b76d4a88500>
Set gradient conv threshold to 3.16228e-05
tot grids = 358356
tot grids = 70968
init E= -273.861824904249
  HOMO = -0.361234939645304  LUMO = -0.169055558098224
cycle= 1 E= -272.947109309396  delta_E= 0.915  |g|= 1.19  |ddm|= 11.1
  HOMO = -0.0868422717387556  LUMO = 0.00250459636909586
cycle= 2 E= -272.397732126712  delta_E= 0.549  |g|= 1.81  |ddm|= 3.34
  HOMO = -0.242427543559967  LUMO = -0.0522388852440006
cycle= 3 E= -273.290195214541  delta_E= -0.892  |g|= 0.154  |ddm|= 1.93
  HOMO = -0.230890796858639  LUMO = -0.0437308284273003
cycle= 4 E= -273.29424058025  delta_E= -0.00405  |g|= 0.0744  |ddm|= 0.202
  HOMO = -0.235179337456097  LUMO = -0.0474705859200126
cycle= 5 E= -273.295553681827  delta_E= -0.00131  |g|= 0.0146  |ddm|= 0.0949
  HOMO = -0.234486242053778  LUMO = -0.0467048290633143
cycle= 6 E= -273.295605965719  delta_E= -5.23e-05  |g|= 0.00129  |ddm|= 0.0218
  HOMO = -0.234712323735208  LUMO = -0.0469153104624071
cycle= 7 E= -273.295606336296  delta_E= -3.71e-07  |g|= 0.000544  |ddm|= 0.00333
  HOMO = -0.234747597488192  LUMO = -0.0469498228801178
cycle= 8 E= -273.295606416563  delta_E= -8.03e-08  |g|= 8.03e-05  |ddm|= 0.000602
  HOMO = -0.234751411152389  LUMO = -0.0469531588817315
cycle= 9 E= -273.295606417984  delta_E= -1.42e-09  |g|= 1.88e-05  |ddm|= 0.000175
  HOMO = -0.234751415532174  LUMO = -0.0469531088969414
cycle= 10 E= -273.295606418043  delta_E= -5.9e-11  |g|= 1.06e-05  |ddm|= 2.6e-05
  HOMO = -0.234751634361665  LUMO = -0.0469533148119158
Extra cycle  E= -273.295606417959  delta_E= 8.34e-11  |g|= 2.14e-05  |ddm|= 2.76e-05
converged SCF energy = -273.295606417959
Electronic spatial extent <R**2> (au): 894.6950
* Multipoles in the independent field-basis, Gauge -> (0,0,0)
Electronic Dipole moment(X, Y, Z, Debye): 0.0000, -0.0000, 20.5775
Nuclear Dipole moment(X, Y, Z, Debye): 0.0000, 0.0000, 20.3783
Total Dipole moment(X, Y, Z, Debye): -0.0000, 0.0000, -0.1992
Quadrupole moments (Debye-Angs)
Total Quadrupole moments (XX, YY, ZZ): -40.9617, -40.9618, -48.9663
Total Quadrupole moments (XY, XZ, YZ): 0.0001, -0.0000, -0.0000
Octupole moments (Debye-Angs**2)
Total Octupole moments (XXX, YYY, ZZZ, XYY): -0.4983, -0.1338, -7.5215, 0.4981
Total Octupole moments (XXY, XXZ, XZZ, YZZ): 0.1337, -5.5394, -0.0000, -0.0001
Total Octupole moments (YYZ, XYZ): -5.5394, 0.0000
Hexadecapole moments (Debye-Angs**3)
Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): -296.0473, -296.0473, -669.4137, 0.0002
Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): -1.8732, 0.0002, -0.5017, 0.0001
Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): -0.0001, -98.6823, -162.9048, -162.9052
Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): 0.5015, 1.8729, 0.0001
