#INFO: **** input file is /home/jluis/src/git/db/molecules-wfn/hf/run_sp.py ****
#!/usr/bin/env python

import numpy, sys, os
from pyscf import lib, gto, scf, dft
from pyscf.tools import molden
from pyscf.data import radii

def read_molecule(path):

    charge = spin = 0
    with open(path, 'r') as myfile:
        output = myfile.read()
        output = output.lstrip()
        output = output.rstrip()
        output = output.split('\n')

    try:
        int(output[0])
    except ValueError:
        try:
            charge = int(output[0].split(' ')[0])
            spin = int(output[0].split(' ')[1]) - 1
        except ValueError:
            molecule = output
        else:
            molecule = '\n'.join(output[1:])
    else:
        if int(output[0]) == len(output) - 2:
            molecule = '\n'.join(output[2:])
            try:
                charge = int(output[1].split(' ')[0])
                spin = int(output[1].split(' ')[1])-1
            except ValueError:
                pass
        else:
            print "THIS IS NOT A VALID XYZ FILE"

    return (molecule, charge, spin)

directory = '../../molecules/'
files = [i for i in os.listdir(directory) if i.endswith('.xyz')]

for filename in files:

    name = filename[:-8]
    mol = gto.Mole()
    (mol.atom, charge, spin) = read_molecule(directory+filename)
    mol.basis = 'aug-cc-pvtz'
    mol.charge = charge
    mol.spin = spin
    mol.output = name+'.out'
    mol.symmetry = 0
    mol.max_memory = 10000
    mol.verbose = 4
    mol.build()

    mf = scf.RHF(mol) 
    mf = scf.addons.remove_linear_dep_(mf)
    mf.max_cycle = 120
    mf.chkfile = name+'.chk'
    mf.kernel()

    dm = mf.make_rdm1()
    nao = mol.nao_nr()
    unit = 2.541746
    origin = ([0.0,0.0,0.0])
    charges = mol.atom_charges()
    coords  = mol.atom_coords()
    mol.set_common_orig(origin)
    r2 = mol.intor_symmetric('int1e_r2')
    r2 = numpy.einsum('ij,ji->', r2, dm)
    lib.logger.info(mf,'Electronic spatial extent <R**2> (au): %.4f', r2)

    lib.logger.info(mf,'* Multipoles in the independent field-basis, Gauge -> (0,0,0)')
    ao_dip = mol.intor_symmetric('int1e_r', comp=3)
    el_dip = numpy.einsum('xij,ji->x', ao_dip, dm)
    lib.logger.info(mf,'Electronic Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *el_dip*unit)
    nucl_dip = numpy.einsum('i,ix->x', charges, coords)
    lib.logger.info(mf,'Nuclear Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *nucl_dip*unit)
    mol_dip = (nucl_dip - el_dip) * unit
    lib.logger.info(mf,'Total Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *mol_dip)

    lib.logger.info(mf,'Quadrupole moments (Debye-Angs)')
    rr = mol.intor_symmetric('int1e_rr', comp=9).reshape(3,3,nao,nao)
    rr = -1.0*numpy.einsum('xyij,ji->xy', rr, dm)
    rr += numpy.einsum('z,zx,zy->xy', charges, coords, coords)
    rr = rr*unit*lib.param.BOHR
    lib.logger.info(mf,'Total Quadrupole moments (XX, YY, ZZ): %.4f, %.4f, %.4f', \
    rr[0,0], rr[1,1], rr[2,2])
    lib.logger.info(mf,'Total Quadrupole moments (XY, XZ, YZ): %.4f, %.4f, %.4f', \
    rr[0,1], rr[0,2], rr[1,2])
 
    lib.logger.info(mf,'Octupole moments (Debye-Angs**2)')
    rrr = mol.intor_symmetric('int1e_rrr', comp=27).reshape(3,3,3,nao,nao)
    rrr = -1.0*numpy.einsum('xyzij,ji->xyz', rrr, dm)
    rrr += numpy.einsum('z,zx,zy,zk->xyk', charges, coords, coords, coords)
    rrr = rrr*unit*lib.param.BOHR**2
    lib.logger.info(mf,'Total Octupole moments (XXX, YYY, ZZZ, XYY): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,0], rrr[1,1,1], rrr[2,2,2], rrr[0,1,1])
    lib.logger.info(mf,'Total Octupole moments (XXY, XXZ, XZZ, YZZ): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,1], rrr[0,0,2], rrr[0,2,2], rrr[1,2,2])
    lib.logger.info(mf,'Total Octupole moments (YYZ, XYZ): %.4f, %.4f', rrr[1,1,2], rrr[0,1,2])

    lib.logger.info(mf,'Hexadecapole moments (Debye-Angs**3)')
    rrrr = mol.intor_symmetric('int1e_rrrr', comp=81).reshape(3,3,3,3,nao,nao)
    rrrr = -1.0*numpy.einsum('xyzwij,ji->xyzw', rrrr, dm)
    rrrr += numpy.einsum('z,zx,zy,zk,zw->xykw', charges, coords, coords, coords, coords)
    rrrr = rrrr*unit*lib.param.BOHR**3
    lib.logger.info(mf,'Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,0], rrrr[1,1,1,1], rrrr[2,2,2,2], rrrr[0,0,0,1])
    lib.logger.info(mf,'Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,2], rrrr[1,1,1,0], rrrr[1,1,1,2], rrrr[2,2,2,0])
    lib.logger.info(mf,'Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): %.4f, %.4f, %.4f, %.4f', \
    rrrr[2,2,2,1], rrrr[0,0,1,1], rrrr[0,0,2,2], rrrr[1,1,2,2])
    lib.logger.info(mf,'Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): %.4f, %.4f, %.4f', \
    rrrr[0,0,1,2], rrrr[1,1,0,2], rrrr[2,2,0,1])
     
    coeff = mf.mo_coeff[:,mf.mo_occ>0]
    occ = mf.mo_occ[mf.mo_occ>0]
    energy = mf.mo_energy[mf.mo_occ>0]
    den_file = name+'.mol'
    fspt = open(den_file,'w')
    molden.header(mol, fspt)
    molden.orbital_coeff(mol, fspt, coeff, ene=energy, occ=occ) 
    fspt.close()                    
    cmd = '/home/jluis/bin/molden2aim '+name
    os.system(cmd)
    den_file = name+'.wfn'
    fspt = open(den_file,'a')
    fspt.write('RHF\n')
    fspt.close()                    

    pmd_file = name+'.pmd'
    fspt = open(pmd_file,'w')
    fspt.write('%s.wfn\n' % (name))
    if (mol.symmetry == False):
        fspt.write('nosymmetry\n')
    fspt.write('tes\n')
    fspt.write('  epsiscp 0.220\n')
    fspt.write('  radialquad 7\n')
    fspt.write('  rmapping 2\n')
    fspt.write('  lmax 10\n')
    fspt.write('  nr 551\n')
    fspt.write('  lebedev 5810\n')
    fspt.write('  betasphere\n')
    for ia in range(mol.natm):
        symb = mol.atom_pure_symbol(ia)
        inuc = lib.parameters.NUC[symb]
        betarad = radii.COVALENT[inuc]/3.5
        fspt.write('  betaradw %d %1.3f\n' % ((ia+1),betarad))
    fspt.write('  radialquadbeta 7\n')
    fspt.write('  rmappingbeta 3\n')
    fspt.write('  lmaxbeta 8\n')
    fspt.write('  nrb 451\n')
    fspt.write('  lebedevbeta 3074\n')
    fspt.write('  dafh\n')
    fspt.write('endtes')
    fspt.close()                    

    cmd = 'rm '+name+'.mol'
    os.system(cmd)
#INFO: ******************** input file end ********************


System: ('Linux', 'silicio', '3.16.0-4-amd64', '#1 SMP Debian 3.16.51-3 (2017-12-13)', 'x86_64', '')  Threads 12
Python 2.7.14 (default, Apr  9 2018, 16:34:43) 
[GCC 7.3.0]
numpy 1.14.2  scipy 1.0.1
Date: Wed Jun 27 23:20:49 2018
PySCF version 1.5
PySCF path  /home/jluis/src/pyscf/pyscf
GIT ORIG_HEAD f2dbb26d09ae5148fbf5975669a994500ac7a4c9
GIT HEAD      ref: refs/heads/master
GIT master branch  f2dbb26d09ae5148fbf5975669a994500ac7a4c9

[ENV] PYSCF_TMPDIR /scratch-ssd/jluis
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 48
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry 0 subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C      0.000000000000   0.000000000000   0.795539000000 AA    0.000000000000   0.000000000000   1.503350831410 Bohr
[INPUT]  2 C      0.000000000000   0.000000000000  -0.533750000000 AA    0.000000000000   0.000000000000  -1.008641318987 Bohr
[INPUT]  3 H      0.000000000000   0.940401000000   1.342133000000 AA    0.000000000000   1.777100337267   2.536263792741 Bohr
[INPUT]  4 H      0.000000000000  -0.940401000000   1.342133000000 AA    0.000000000000  -1.777100337267   2.536263792741 Bohr
[INPUT]  5 Cl     0.000000000000   1.453207000000  -1.473028000000 AA    0.000000000000   2.746163232301  -2.783619493816 Bohr
[INPUT]  6 Cl     0.000000000000  -1.453207000000  -1.473028000000 AA    0.000000000000  -2.746163232301  -2.783619493816 Bohr

nuclear repulsion = 189.710199777124
number of shells = 70
number of NR pGTOs = 316
number of NR cGTOs = 238
basis = aug-cc-pvtz
ecp = {}
CPU time:    128290.34


******** <class 'pyscf.scf.hf.RHF'> flags ********
method = RHF
initial guess = minao
damping factor = 0
level shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
DIIS start cycle = 1
DIIS space = 8
SCF tol = 1e-09
SCF gradient tol = None
max. SCF cycles = 120
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = c2h2cl2.chk
max_memory 10000 MB (current use 177 MB)
Set gradient conv threshold to 3.16228e-05
init E= -996.721056017003
  HOMO = -0.272724731734877  LUMO = 0.0248521320913058
cycle= 1 E= -995.859776392422  delta_E= 0.861  |g|= 0.471  |ddm|= 2.37
  HOMO = -0.410092992123724  LUMO = 0.0286167324050254
cycle= 2 E= -995.901497004613  delta_E= -0.0417  |g|= 0.351  |ddm|= 0.529
  HOMO = -0.372783231221817  LUMO = 0.0300995636451657
cycle= 3 E= -995.928943619656  delta_E= -0.0274  |g|= 0.0551  |ddm|= 0.22
  HOMO = -0.374461274217027  LUMO = 0.0311465588875687
cycle= 4 E= -995.930792614708  delta_E= -0.00185  |g|= 0.0138  |ddm|= 0.0934
  HOMO = -0.374774463526279  LUMO = 0.0305409619341504
cycle= 5 E= -995.930922031329  delta_E= -0.000129  |g|= 0.00518  |ddm|= 0.0245
  HOMO = -0.373970892302226  LUMO = 0.0305959198214133
cycle= 6 E= -995.930939544466  delta_E= -1.75e-05  |g|= 0.00214  |ddm|= 0.00861
  HOMO = -0.374163333889797  LUMO = 0.0305401847697879
cycle= 7 E= -995.930941697818  delta_E= -2.15e-06  |g|= 0.000427  |ddm|= 0.00309
  HOMO = -0.374137627482905  LUMO = 0.0305227748568307
cycle= 8 E= -995.930941864536  delta_E= -1.67e-07  |g|= 0.00013  |ddm|= 0.000887
  HOMO = -0.374142873930172  LUMO = 0.0305196370394326
cycle= 9 E= -995.930941880993  delta_E= -1.65e-08  |g|= 3.61e-05  |ddm|= 0.000284
  HOMO = -0.37414363364351  LUMO = 0.0305177601177468
cycle= 10 E= -995.930941882168  delta_E= -1.18e-09  |g|= 7.72e-06  |ddm|= 9.2e-05
  HOMO = -0.374143915508858  LUMO = 0.0305175645277951
cycle= 11 E= -995.930941882208  delta_E= -3.96e-11  |g|= 2.3e-06  |ddm|= 1.44e-05
  HOMO = -0.374143939403533  LUMO = 0.0305174954416705
Extra cycle  E= -995.930941882212  delta_E= -4.09e-12  |g|= 1.16e-06  |ddm|= 3.92e-06
converged SCF energy = -995.930941882212
Electronic spatial extent <R**2> (au): 642.6343
* Multipoles in the independent field-basis, Gauge -> (0,0,0)
Electronic Dipole moment(X, Y, Z, Debye): -0.0000, -0.0000, -221.7403
Nuclear Dipole moment(X, Y, Z, Debye): 0.0000, 0.0000, -220.1210
Total Dipole moment(X, Y, Z, Debye): 0.0000, 0.0000, 1.6193
Quadrupole moments (Debye-Angs)
Total Quadrupole moments (XX, YY, ZZ): -39.0130, -36.9446, -36.9311
Total Quadrupole moments (XY, XZ, YZ): 0.0000, 0.0000, -0.0000
Octupole moments (Debye-Angs**2)
Total Octupole moments (XXX, YYY, ZZZ, XYY): -0.0000, -0.0000, 105.3745, -0.0000
Total Octupole moments (XXY, XXZ, XZZ, YZZ): 0.0000, 34.0990, -0.0000, 0.0000
Total Octupole moments (YYZ, XYZ): 32.5786, -0.0000
Hexadecapole moments (Debye-Angs**3)
Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): -44.9439, -351.1971, -413.6841, 0.0000
Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): 0.0000, 0.0000, -0.0000, 0.0000
Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): -0.0000, -70.9931, -78.8683, -115.1713
Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): -0.0000, 0.0000, 0.0000
