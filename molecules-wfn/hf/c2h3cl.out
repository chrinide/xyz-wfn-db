#INFO: **** input file is /home/jluis/src/git/db/molecules-wfn/hf/run_sp.py ****
#!/usr/bin/env python

import numpy, sys, os
from pyscf import lib, gto, scf, dft
from pyscf.tools import molden
from pyscf.data import radii

def read_molecule(path):

    charge = spin = 0
    with open(path, 'r') as myfile:
        output = myfile.read()
        output = output.lstrip()
        output = output.rstrip()
        output = output.split('\n')

    try:
        int(output[0])
    except ValueError:
        try:
            charge = int(output[0].split(' ')[0])
            spin = int(output[0].split(' ')[1]) - 1
        except ValueError:
            molecule = output
        else:
            molecule = '\n'.join(output[1:])
    else:
        if int(output[0]) == len(output) - 2:
            molecule = '\n'.join(output[2:])
            try:
                charge = int(output[1].split(' ')[0])
                spin = int(output[1].split(' ')[1])-1
            except ValueError:
                pass
        else:
            print "THIS IS NOT A VALID XYZ FILE"

    return (molecule, charge, spin)

directory = '../../molecules/'
files = [i for i in os.listdir(directory) if i.endswith('.xyz')]

for filename in files:

    name = filename[:-8]
    mol = gto.Mole()
    (mol.atom, charge, spin) = read_molecule(directory+filename)
    mol.basis = 'aug-cc-pvtz'
    mol.charge = charge
    mol.spin = spin
    mol.output = name+'.out'
    mol.symmetry = 0
    mol.max_memory = 10000
    mol.verbose = 4
    mol.build()

    mf = scf.RHF(mol) 
    mf = scf.addons.remove_linear_dep_(mf)
    mf.max_cycle = 120
    mf.chkfile = name+'.chk'
    mf.kernel()

    dm = mf.make_rdm1()
    nao = mol.nao_nr()
    unit = 2.541746
    origin = ([0.0,0.0,0.0])
    charges = mol.atom_charges()
    coords  = mol.atom_coords()
    mol.set_common_orig(origin)
    r2 = mol.intor_symmetric('int1e_r2')
    r2 = numpy.einsum('ij,ji->', r2, dm)
    lib.logger.info(mf,'Electronic spatial extent <R**2> (au): %.4f', r2)

    lib.logger.info(mf,'* Multipoles in the independent field-basis, Gauge -> (0,0,0)')
    ao_dip = mol.intor_symmetric('int1e_r', comp=3)
    el_dip = numpy.einsum('xij,ji->x', ao_dip, dm)
    lib.logger.info(mf,'Electronic Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *el_dip*unit)
    nucl_dip = numpy.einsum('i,ix->x', charges, coords)
    lib.logger.info(mf,'Nuclear Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *nucl_dip*unit)
    mol_dip = (nucl_dip - el_dip) * unit
    lib.logger.info(mf,'Total Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *mol_dip)

    lib.logger.info(mf,'Quadrupole moments (Debye-Angs)')
    rr = mol.intor_symmetric('int1e_rr', comp=9).reshape(3,3,nao,nao)
    rr = -1.0*numpy.einsum('xyij,ji->xy', rr, dm)
    rr += numpy.einsum('z,zx,zy->xy', charges, coords, coords)
    rr = rr*unit*lib.param.BOHR
    lib.logger.info(mf,'Total Quadrupole moments (XX, YY, ZZ): %.4f, %.4f, %.4f', \
    rr[0,0], rr[1,1], rr[2,2])
    lib.logger.info(mf,'Total Quadrupole moments (XY, XZ, YZ): %.4f, %.4f, %.4f', \
    rr[0,1], rr[0,2], rr[1,2])
 
    lib.logger.info(mf,'Octupole moments (Debye-Angs**2)')
    rrr = mol.intor_symmetric('int1e_rrr', comp=27).reshape(3,3,3,nao,nao)
    rrr = -1.0*numpy.einsum('xyzij,ji->xyz', rrr, dm)
    rrr += numpy.einsum('z,zx,zy,zk->xyk', charges, coords, coords, coords)
    rrr = rrr*unit*lib.param.BOHR**2
    lib.logger.info(mf,'Total Octupole moments (XXX, YYY, ZZZ, XYY): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,0], rrr[1,1,1], rrr[2,2,2], rrr[0,1,1])
    lib.logger.info(mf,'Total Octupole moments (XXY, XXZ, XZZ, YZZ): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,1], rrr[0,0,2], rrr[0,2,2], rrr[1,2,2])
    lib.logger.info(mf,'Total Octupole moments (YYZ, XYZ): %.4f, %.4f', rrr[1,1,2], rrr[0,1,2])

    lib.logger.info(mf,'Hexadecapole moments (Debye-Angs**3)')
    rrrr = mol.intor_symmetric('int1e_rrrr', comp=81).reshape(3,3,3,3,nao,nao)
    rrrr = -1.0*numpy.einsum('xyzwij,ji->xyzw', rrrr, dm)
    rrrr += numpy.einsum('z,zx,zy,zk,zw->xykw', charges, coords, coords, coords, coords)
    rrrr = rrrr*unit*lib.param.BOHR**3
    lib.logger.info(mf,'Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,0], rrrr[1,1,1,1], rrrr[2,2,2,2], rrrr[0,0,0,1])
    lib.logger.info(mf,'Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,2], rrrr[1,1,1,0], rrrr[1,1,1,2], rrrr[2,2,2,0])
    lib.logger.info(mf,'Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): %.4f, %.4f, %.4f, %.4f', \
    rrrr[2,2,2,1], rrrr[0,0,1,1], rrrr[0,0,2,2], rrrr[1,1,2,2])
    lib.logger.info(mf,'Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): %.4f, %.4f, %.4f', \
    rrrr[0,0,1,2], rrrr[1,1,0,2], rrrr[2,2,0,1])
     
    coeff = mf.mo_coeff[:,mf.mo_occ>0]
    occ = mf.mo_occ[mf.mo_occ>0]
    energy = mf.mo_energy[mf.mo_occ>0]
    den_file = name+'.mol'
    fspt = open(den_file,'w')
    molden.header(mol, fspt)
    molden.orbital_coeff(mol, fspt, coeff, ene=energy, occ=occ) 
    fspt.close()                    
    cmd = '/home/jluis/bin/molden2aim '+name
    os.system(cmd)
    den_file = name+'.wfn'
    fspt = open(den_file,'a')
    fspt.write('RHF\n')
    fspt.close()                    

    pmd_file = name+'.pmd'
    fspt = open(pmd_file,'w')
    fspt.write('%s.wfn\n' % (name))
    if (mol.symmetry == False):
        fspt.write('nosymmetry\n')
    fspt.write('tes\n')
    fspt.write('  epsiscp 0.220\n')
    fspt.write('  radialquad 7\n')
    fspt.write('  rmapping 2\n')
    fspt.write('  lmax 10\n')
    fspt.write('  nr 551\n')
    fspt.write('  lebedev 5810\n')
    fspt.write('  betasphere\n')
    for ia in range(mol.natm):
        symb = mol.atom_pure_symbol(ia)
        inuc = lib.parameters.NUC[symb]
        betarad = radii.COVALENT[inuc]/3.5
        fspt.write('  betaradw %d %1.3f\n' % ((ia+1),betarad))
    fspt.write('  radialquadbeta 7\n')
    fspt.write('  rmappingbeta 3\n')
    fspt.write('  lmaxbeta 8\n')
    fspt.write('  nrb 451\n')
    fspt.write('  lebedevbeta 3074\n')
    fspt.write('  dafh\n')
    fspt.write('endtes')
    fspt.close()                    

    cmd = 'rm '+name+'.mol'
    os.system(cmd)
#INFO: ******************** input file end ********************


System: ('Linux', 'silicio', '3.16.0-4-amd64', '#1 SMP Debian 3.16.51-3 (2017-12-13)', 'x86_64', '')  Threads 12
Python 2.7.14 (default, Apr  9 2018, 16:34:43) 
[GCC 7.3.0]
numpy 1.14.2  scipy 1.0.1
Date: Wed Jun 27 20:20:01 2018
PySCF version 1.5
PySCF path  /home/jluis/src/pyscf/pyscf
GIT ORIG_HEAD f2dbb26d09ae5148fbf5975669a994500ac7a4c9
GIT HEAD      ref: refs/heads/master
GIT master branch  f2dbb26d09ae5148fbf5975669a994500ac7a4c9

[ENV] PYSCF_TMPDIR /scratch-ssd/jluis
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 32
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry 0 subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C     -0.000003000000   0.062618000000   0.741597000000 AA   -0.000005669178   0.118330870468   1.401415224799 Bohr
[INPUT]  2 C     -0.000001000000   0.107859000000  -0.585753000000 AA   -0.000001889726   0.203823970069  -1.106912746642 Bohr
[INPUT]  3 H     -0.000001000000   0.994885000000   1.306280000000 AA   -0.000001889726   1.880060175438   2.468511441997 Bohr
[INPUT]  4 H      0.000003000000  -0.878987000000   1.288797000000 AA    0.000005669178  -1.661044697053   2.435473360161 Bohr
[INPUT]  5 H      0.000003000000   1.028808000000  -1.168159000000 AA    0.000005669178   1.944165354762  -2.207500579946 Bohr
[INPUT]  6 Cl    -0.000001000000  -1.315183000000  -1.582762000000 AA   -0.000001889726  -2.485335673684  -2.990986700369 Bohr

nuclear repulsion = 88.6032715228257
number of shells = 66
number of NR pGTOs = 266
number of NR cGTOs = 211
basis = aug-cc-pvtz
ecp = {}
CPU time:         0.22


******** <class 'pyscf.scf.hf.RHF'> flags ********
method = RHF
initial guess = minao
damping factor = 0
level shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
DIIS start cycle = 1
DIIS space = 8
SCF tol = 1e-09
SCF gradient tol = None
max. SCF cycles = 120
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = c2h3cl.chk
max_memory 10000 MB (current use 63 MB)
Set gradient conv threshold to 3.16228e-05
init E= -537.458761423211
  HOMO = -0.293346863027735  LUMO = 0.0192520089760083
cycle= 1 E= -536.965240298694  delta_E= 0.494  |g|= 0.321  |ddm|= 2.31
  HOMO = -0.383182441025149  LUMO = 0.0265799218483809
cycle= 2 E= -536.994748273741  delta_E= -0.0295  |g|= 0.157  |ddm|= 0.339
  HOMO = -0.370799612331027  LUMO = 0.0296959210733837
cycle= 3 E= -537.000576796428  delta_E= -0.00583  |g|= 0.0519  |ddm|= 0.134
  HOMO = -0.373664053986397  LUMO = 0.0301350240903132
cycle= 4 E= -537.001640226161  delta_E= -0.00106  |g|= 0.00988  |ddm|= 0.0541
  HOMO = -0.372895372595408  LUMO = 0.029850591559653
cycle= 5 E= -537.001698471802  delta_E= -5.82e-05  |g|= 0.00381  |ddm|= 0.0151
  HOMO = -0.372858858191727  LUMO = 0.0299137695260315
cycle= 6 E= -537.001708820414  delta_E= -1.03e-05  |g|= 0.00137  |ddm|= 0.00682
  HOMO = -0.372948440539899  LUMO = 0.0298995091214414
cycle= 7 E= -537.001709759353  delta_E= -9.39e-07  |g|= 0.000329  |ddm|= 0.00206
  HOMO = -0.372878608960235  LUMO = 0.0299023182359119
cycle= 8 E= -537.001709842322  delta_E= -8.3e-08  |g|= 8.68e-05  |ddm|= 0.000728
  HOMO = -0.372894237136122  LUMO = 0.0299017452229519
cycle= 9 E= -537.001709847155  delta_E= -4.83e-09  |g|= 3.04e-05  |ddm|= 0.00015
  HOMO = -0.372889928477171  LUMO = 0.0299014141013879
cycle= 10 E= -537.001709847842  delta_E= -6.87e-10  |g|= 1.11e-05  |ddm|= 5.75e-05
  HOMO = -0.372891331157965  LUMO = 0.0299011840037209
Extra cycle  E= -537.001709847915  delta_E= -7.28e-11  |g|= 5.06e-06  |ddm|= 1.78e-05
converged SCF energy = -537.001709847915
Electronic spatial extent <R**2> (au): 361.3135
* Multipoles in the independent field-basis, Gauge -> (0,0,0)
Electronic Dipole moment(X, Y, Z, Debye): -0.0002, -98.2621, -118.9676
Nuclear Dipole moment(X, Y, Z, Debye): -0.0002, -96.9793, -117.8945
Total Dipole moment(X, Y, Z, Debye): 0.0000, 1.2828, 1.0731
Quadrupole moments (Debye-Angs)
Total Quadrupole moments (XX, YY, ZZ): -27.5887, -24.8890, -25.2438
Total Quadrupole moments (XY, XZ, YZ): 0.0000, 0.0000, -1.8066
Octupole moments (Debye-Angs**2)
Total Octupole moments (XXX, YYY, ZZZ, XYY): 0.0001, 45.9105, 58.3843, 0.0000
Total Octupole moments (XXY, XXZ, XZZ, YZZ): 15.2222, 18.3904, 0.0000, 16.7048
Total Octupole moments (YYZ, XYZ): 18.3240, -0.0000
Hexadecapole moments (Debye-Angs**3)
Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): -32.9521, -166.4415, -271.0783, -0.0000
Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): -0.0000, -0.0000, -73.1547, -0.0000
Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): -77.4615, -35.5654, -51.9963, -65.2749
Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): -26.8639, -0.0000, -0.0000
