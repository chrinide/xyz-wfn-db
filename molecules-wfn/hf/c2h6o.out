#INFO: **** input file is /home/jluis/src/git/db/molecules-wfn/hf/run_sp.py ****
#!/usr/bin/env python

import numpy, sys, os
from pyscf import lib, gto, scf, dft
from pyscf.tools import molden
from pyscf.data import radii

def read_molecule(path):

    charge = spin = 0
    with open(path, 'r') as myfile:
        output = myfile.read()
        output = output.lstrip()
        output = output.rstrip()
        output = output.split('\n')

    try:
        int(output[0])
    except ValueError:
        try:
            charge = int(output[0].split(' ')[0])
            spin = int(output[0].split(' ')[1]) - 1
        except ValueError:
            molecule = output
        else:
            molecule = '\n'.join(output[1:])
    else:
        if int(output[0]) == len(output) - 2:
            molecule = '\n'.join(output[2:])
            try:
                charge = int(output[1].split(' ')[0])
                spin = int(output[1].split(' ')[1])-1
            except ValueError:
                pass
        else:
            print "THIS IS NOT A VALID XYZ FILE"

    return (molecule, charge, spin)

directory = '../../molecules/'
files = [i for i in os.listdir(directory) if i.endswith('.xyz')]

for filename in files:

    name = filename[:-8]
    mol = gto.Mole()
    (mol.atom, charge, spin) = read_molecule(directory+filename)
    mol.basis = 'aug-cc-pvtz'
    mol.charge = charge
    mol.spin = spin
    mol.output = name+'.out'
    mol.symmetry = 0
    mol.max_memory = 10000
    mol.verbose = 4
    mol.build()

    mf = scf.RHF(mol) 
    mf = scf.addons.remove_linear_dep_(mf)
    mf.max_cycle = 120
    mf.chkfile = name+'.chk'
    mf.kernel()

    dm = mf.make_rdm1()
    nao = mol.nao_nr()
    unit = 2.541746
    origin = ([0.0,0.0,0.0])
    charges = mol.atom_charges()
    coords  = mol.atom_coords()
    mol.set_common_orig(origin)
    r2 = mol.intor_symmetric('int1e_r2')
    r2 = numpy.einsum('ij,ji->', r2, dm)
    lib.logger.info(mf,'Electronic spatial extent <R**2> (au): %.4f', r2)

    lib.logger.info(mf,'* Multipoles in the independent field-basis, Gauge -> (0,0,0)')
    ao_dip = mol.intor_symmetric('int1e_r', comp=3)
    el_dip = numpy.einsum('xij,ji->x', ao_dip, dm)
    lib.logger.info(mf,'Electronic Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *el_dip*unit)
    nucl_dip = numpy.einsum('i,ix->x', charges, coords)
    lib.logger.info(mf,'Nuclear Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *nucl_dip*unit)
    mol_dip = (nucl_dip - el_dip) * unit
    lib.logger.info(mf,'Total Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *mol_dip)

    lib.logger.info(mf,'Quadrupole moments (Debye-Angs)')
    rr = mol.intor_symmetric('int1e_rr', comp=9).reshape(3,3,nao,nao)
    rr = -1.0*numpy.einsum('xyij,ji->xy', rr, dm)
    rr += numpy.einsum('z,zx,zy->xy', charges, coords, coords)
    rr = rr*unit*lib.param.BOHR
    lib.logger.info(mf,'Total Quadrupole moments (XX, YY, ZZ): %.4f, %.4f, %.4f', \
    rr[0,0], rr[1,1], rr[2,2])
    lib.logger.info(mf,'Total Quadrupole moments (XY, XZ, YZ): %.4f, %.4f, %.4f', \
    rr[0,1], rr[0,2], rr[1,2])
 
    lib.logger.info(mf,'Octupole moments (Debye-Angs**2)')
    rrr = mol.intor_symmetric('int1e_rrr', comp=27).reshape(3,3,3,nao,nao)
    rrr = -1.0*numpy.einsum('xyzij,ji->xyz', rrr, dm)
    rrr += numpy.einsum('z,zx,zy,zk->xyk', charges, coords, coords, coords)
    rrr = rrr*unit*lib.param.BOHR**2
    lib.logger.info(mf,'Total Octupole moments (XXX, YYY, ZZZ, XYY): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,0], rrr[1,1,1], rrr[2,2,2], rrr[0,1,1])
    lib.logger.info(mf,'Total Octupole moments (XXY, XXZ, XZZ, YZZ): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,1], rrr[0,0,2], rrr[0,2,2], rrr[1,2,2])
    lib.logger.info(mf,'Total Octupole moments (YYZ, XYZ): %.4f, %.4f', rrr[1,1,2], rrr[0,1,2])

    lib.logger.info(mf,'Hexadecapole moments (Debye-Angs**3)')
    rrrr = mol.intor_symmetric('int1e_rrrr', comp=81).reshape(3,3,3,3,nao,nao)
    rrrr = -1.0*numpy.einsum('xyzwij,ji->xyzw', rrrr, dm)
    rrrr += numpy.einsum('z,zx,zy,zk,zw->xykw', charges, coords, coords, coords, coords)
    rrrr = rrrr*unit*lib.param.BOHR**3
    lib.logger.info(mf,'Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,0], rrrr[1,1,1,1], rrrr[2,2,2,2], rrrr[0,0,0,1])
    lib.logger.info(mf,'Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,2], rrrr[1,1,1,0], rrrr[1,1,1,2], rrrr[2,2,2,0])
    lib.logger.info(mf,'Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): %.4f, %.4f, %.4f, %.4f', \
    rrrr[2,2,2,1], rrrr[0,0,1,1], rrrr[0,0,2,2], rrrr[1,1,2,2])
    lib.logger.info(mf,'Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): %.4f, %.4f, %.4f', \
    rrrr[0,0,1,2], rrrr[1,1,0,2], rrrr[2,2,0,1])
     
    coeff = mf.mo_coeff[:,mf.mo_occ>0]
    occ = mf.mo_occ[mf.mo_occ>0]
    energy = mf.mo_energy[mf.mo_occ>0]
    den_file = name+'.mol'
    fspt = open(den_file,'w')
    molden.header(mol, fspt)
    molden.orbital_coeff(mol, fspt, coeff, ene=energy, occ=occ) 
    fspt.close()                    
    cmd = '/home/jluis/bin/molden2aim '+name
    os.system(cmd)
    den_file = name+'.wfn'
    fspt = open(den_file,'a')
    fspt.write('RHF\n')
    fspt.close()                    

    pmd_file = name+'.pmd'
    fspt = open(pmd_file,'w')
    fspt.write('%s.wfn\n' % (name))
    if (mol.symmetry == False):
        fspt.write('nosymmetry\n')
    fspt.write('tes\n')
    fspt.write('  epsiscp 0.220\n')
    fspt.write('  radialquad 7\n')
    fspt.write('  rmapping 2\n')
    fspt.write('  lmax 10\n')
    fspt.write('  nr 551\n')
    fspt.write('  lebedev 5810\n')
    fspt.write('  betasphere\n')
    for ia in range(mol.natm):
        symb = mol.atom_pure_symbol(ia)
        inuc = lib.parameters.NUC[symb]
        betarad = radii.COVALENT[inuc]/3.5
        fspt.write('  betaradw %d %1.3f\n' % ((ia+1),betarad))
    fspt.write('  radialquadbeta 7\n')
    fspt.write('  rmappingbeta 3\n')
    fspt.write('  lmaxbeta 8\n')
    fspt.write('  nrb 451\n')
    fspt.write('  lebedevbeta 3074\n')
    fspt.write('  dafh\n')
    fspt.write('endtes')
    fspt.close()                    

    cmd = 'rm '+name+'.mol'
    os.system(cmd)
#INFO: ******************** input file end ********************


System: ('Linux', 'silicio', '3.16.0-4-amd64', '#1 SMP Debian 3.16.51-3 (2017-12-13)', 'x86_64', '')  Threads 12
Python 2.7.14 (default, Apr  9 2018, 16:34:43) 
[GCC 7.3.0]
numpy 1.14.2  scipy 1.0.1
Date: Wed Jun 27 22:30:09 2018
PySCF version 1.5
PySCF path  /home/jluis/src/pyscf/pyscf
GIT ORIG_HEAD f2dbb26d09ae5148fbf5975669a994500ac7a4c9
GIT HEAD      ref: refs/heads/master
GIT master branch  f2dbb26d09ae5148fbf5975669a994500ac7a4c9

[ENV] PYSCF_TMPDIR /scratch-ssd/jluis
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 9
[INPUT] num. electrons = 26
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry 0 subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O     -5.042374000000   2.708313000000   0.071741000000 AA   -9.528705877628   5.117969829599   0.135570841902 Bohr
[INPUT]  2 C     -3.637178000000   2.714149000000   0.105418000000 AA   -6.873270286293   5.128998271262   0.199211148599 Bohr
[INPUT]  3 C     -5.540934000000   2.969253000000  -1.216334000000 AA  -10.470847734291   5.611074964543  -2.298538135997 Bohr
[INPUT]  4 H     -3.331780000000   2.504403000000   1.137007000000 AA   -6.296151707303   4.732635775539   2.148631831713 Bohr
[INPUT]  5 H     -3.228986000000   3.695512000000  -0.197932000000 AA   -6.101899200055   6.983505570044  -0.374037271287 Bohr
[INPUT]  6 H     -3.213100000000   1.939723000000  -0.559514000000 AA   -6.071879010840   3.665545227520  -1.057328222860 Bohr
[INPUT]  7 H     -5.221141000000   3.962579000000  -1.580692000000 AA   -9.866526547738   7.488189056953  -2.987074967291 Bohr
[INPUT]  8 H     -6.635175000000   2.946704000000  -1.156607000000 AA  -12.538663538561   5.568463530160  -2.185670463755 Bohr
[INPUT]  9 H     -5.204821000000   2.206874000000  -1.942638000000 AA   -9.835686217385   4.170387451423  -3.671053779173 Bohr

nuclear repulsion = 83.9578201426807
number of shells = 93
number of NR pGTOs = 324
number of NR cGTOs = 276
basis = aug-cc-pvtz
ecp = {}
CPU time:     92446.74


******** <class 'pyscf.scf.hf.RHF'> flags ********
method = RHF
initial guess = minao
damping factor = 0
level shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
DIIS start cycle = 1
DIIS space = 8
SCF tol = 1e-09
SCF gradient tol = None
max. SCF cycles = 120
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = c2h6o.chk
max_memory 10000 MB (current use 165 MB)
Set gradient conv threshold to 3.16228e-05
init E= -154.453110604313
  HOMO = -0.341290288373428  LUMO = 0.0231365716184687
cycle= 1 E= -154.082991412975  delta_E= 0.37  |g|= 0.439  |ddm|= 1.97
  HOMO = -0.379582828421704  LUMO = 0.0278579067747636
cycle= 2 E= -154.117473547501  delta_E= -0.0345  |g|= 0.243  |ddm|= 0.462
  HOMO = -0.433897584584564  LUMO = 0.0301777393901858
cycle= 3 E= -154.127059427675  delta_E= -0.00959  |g|= 0.0736  |ddm|= 0.134
  HOMO = -0.421132636661934  LUMO = 0.0304543546940332
cycle= 4 E= -154.128069217951  delta_E= -0.00101  |g|= 0.00974  |ddm|= 0.0566
  HOMO = -0.424342555113934  LUMO = 0.030376166832871
cycle= 5 E= -154.12809317919  delta_E= -2.4e-05  |g|= 0.00217  |ddm|= 0.00937
  HOMO = -0.423992582130561  LUMO = 0.0303919714804523
cycle= 6 E= -154.128095113955  delta_E= -1.93e-06  |g|= 0.000471  |ddm|= 0.00272
  HOMO = -0.424140928730644  LUMO = 0.0303961274296261
cycle= 7 E= -154.128095228856  delta_E= -1.15e-07  |g|= 0.000126  |ddm|= 0.000629
  HOMO = -0.424160927331018  LUMO = 0.0303956359816349
cycle= 8 E= -154.128095238407  delta_E= -9.55e-09  |g|= 2.74e-05  |ddm|= 0.000171
  HOMO = -0.424166716225151  LUMO = 0.03039575967779
cycle= 9 E= -154.128095238869  delta_E= -4.61e-10  |g|= 6.48e-06  |ddm|= 3.91e-05
  HOMO = -0.424166980386191  LUMO = 0.0303957687933767
Extra cycle  E= -154.128095238892  delta_E= -2.35e-11  |g|= 2.82e-06  |ddm|= 8.11e-06
converged SCF energy = -154.128095238892
Electronic spatial extent <R**2> (au): 2991.1051
* Multipoles in the independent field-basis, Gauge -> (0,0,0)
Electronic Dipole moment(X, Y, Z, Debye): -587.9780, 350.5012, -48.7778
Nuclear Dipole moment(X, Y, Z, Debye): -587.1564, 350.7430, -49.9146
Total Dipole moment(X, Y, Z, Debye): 0.8216, 0.2417, -1.1368
Quadrupole moments (Debye-Angs)
Total Quadrupole moments (XX, YY, ZZ): -26.5040, -18.7556, -19.1636
Total Quadrupole moments (XY, XZ, YZ): 0.8120, 6.8182, -3.2806
Octupole moments (Debye-Angs**2)
Total Octupole moments (XXX, YYY, ZZZ, XYY): 315.9660, -163.5407, 26.3624, 92.9432
Total Octupole moments (XXY, XXZ, XZZ, YZZ): -65.8442, -31.0456, 89.6697, -54.5245
Total Octupole moments (YYZ, XYZ): -1.6347, 19.5883
Hexadecapole moments (Debye-Angs**3)
Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): -2891.8147, -964.1637, -108.2214, 845.2648
Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): 79.1185, 786.7089, 43.7625, -149.2311
Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): 79.6929, -636.0711, -458.6595, -178.5545
Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): -87.7014, 9.7014, 256.1526
