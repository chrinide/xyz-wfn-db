#INFO: **** input file is /home/jluis/src/git/db/molecules-wfn/hf/run_sp.py ****
#!/usr/bin/env python

import numpy, sys, os
from pyscf import lib, gto, scf, dft
from pyscf.tools import molden
from pyscf.data import radii

def read_molecule(path):

    charge = spin = 0
    with open(path, 'r') as myfile:
        output = myfile.read()
        output = output.lstrip()
        output = output.rstrip()
        output = output.split('\n')

    try:
        int(output[0])
    except ValueError:
        try:
            charge = int(output[0].split(' ')[0])
            spin = int(output[0].split(' ')[1]) - 1
        except ValueError:
            molecule = output
        else:
            molecule = '\n'.join(output[1:])
    else:
        if int(output[0]) == len(output) - 2:
            molecule = '\n'.join(output[2:])
            try:
                charge = int(output[1].split(' ')[0])
                spin = int(output[1].split(' ')[1])-1
            except ValueError:
                pass
        else:
            print "THIS IS NOT A VALID XYZ FILE"

    return (molecule, charge, spin)

directory = '../../molecules/'
files = [i for i in os.listdir(directory) if i.endswith('.xyz')]

for filename in files:

    name = filename[:-8]
    mol = gto.Mole()
    (mol.atom, charge, spin) = read_molecule(directory+filename)
    mol.basis = 'aug-cc-pvtz'
    mol.charge = charge
    mol.spin = spin
    mol.output = name+'.out'
    mol.symmetry = 0
    mol.max_memory = 10000
    mol.verbose = 4
    mol.build()

    mf = scf.RHF(mol) 
    mf = scf.addons.remove_linear_dep_(mf)
    mf.max_cycle = 120
    mf.chkfile = name+'.chk'
    mf.kernel()

    dm = mf.make_rdm1()
    nao = mol.nao_nr()
    unit = 2.541746
    origin = ([0.0,0.0,0.0])
    charges = mol.atom_charges()
    coords  = mol.atom_coords()
    mol.set_common_orig(origin)
    r2 = mol.intor_symmetric('int1e_r2')
    r2 = numpy.einsum('ij,ji->', r2, dm)
    lib.logger.info(mf,'Electronic spatial extent <R**2> (au): %.4f', r2)

    lib.logger.info(mf,'* Multipoles in the independent field-basis, Gauge -> (0,0,0)')
    ao_dip = mol.intor_symmetric('int1e_r', comp=3)
    el_dip = numpy.einsum('xij,ji->x', ao_dip, dm)
    lib.logger.info(mf,'Electronic Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *el_dip*unit)
    nucl_dip = numpy.einsum('i,ix->x', charges, coords)
    lib.logger.info(mf,'Nuclear Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *nucl_dip*unit)
    mol_dip = (nucl_dip - el_dip) * unit
    lib.logger.info(mf,'Total Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *mol_dip)

    lib.logger.info(mf,'Quadrupole moments (Debye-Angs)')
    rr = mol.intor_symmetric('int1e_rr', comp=9).reshape(3,3,nao,nao)
    rr = -1.0*numpy.einsum('xyij,ji->xy', rr, dm)
    rr += numpy.einsum('z,zx,zy->xy', charges, coords, coords)
    rr = rr*unit*lib.param.BOHR
    lib.logger.info(mf,'Total Quadrupole moments (XX, YY, ZZ): %.4f, %.4f, %.4f', \
    rr[0,0], rr[1,1], rr[2,2])
    lib.logger.info(mf,'Total Quadrupole moments (XY, XZ, YZ): %.4f, %.4f, %.4f', \
    rr[0,1], rr[0,2], rr[1,2])
 
    lib.logger.info(mf,'Octupole moments (Debye-Angs**2)')
    rrr = mol.intor_symmetric('int1e_rrr', comp=27).reshape(3,3,3,nao,nao)
    rrr = -1.0*numpy.einsum('xyzij,ji->xyz', rrr, dm)
    rrr += numpy.einsum('z,zx,zy,zk->xyk', charges, coords, coords, coords)
    rrr = rrr*unit*lib.param.BOHR**2
    lib.logger.info(mf,'Total Octupole moments (XXX, YYY, ZZZ, XYY): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,0], rrr[1,1,1], rrr[2,2,2], rrr[0,1,1])
    lib.logger.info(mf,'Total Octupole moments (XXY, XXZ, XZZ, YZZ): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,1], rrr[0,0,2], rrr[0,2,2], rrr[1,2,2])
    lib.logger.info(mf,'Total Octupole moments (YYZ, XYZ): %.4f, %.4f', rrr[1,1,2], rrr[0,1,2])

    lib.logger.info(mf,'Hexadecapole moments (Debye-Angs**3)')
    rrrr = mol.intor_symmetric('int1e_rrrr', comp=81).reshape(3,3,3,3,nao,nao)
    rrrr = -1.0*numpy.einsum('xyzwij,ji->xyzw', rrrr, dm)
    rrrr += numpy.einsum('z,zx,zy,zk,zw->xykw', charges, coords, coords, coords, coords)
    rrrr = rrrr*unit*lib.param.BOHR**3
    lib.logger.info(mf,'Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,0], rrrr[1,1,1,1], rrrr[2,2,2,2], rrrr[0,0,0,1])
    lib.logger.info(mf,'Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,2], rrrr[1,1,1,0], rrrr[1,1,1,2], rrrr[2,2,2,0])
    lib.logger.info(mf,'Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): %.4f, %.4f, %.4f, %.4f', \
    rrrr[2,2,2,1], rrrr[0,0,1,1], rrrr[0,0,2,2], rrrr[1,1,2,2])
    lib.logger.info(mf,'Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): %.4f, %.4f, %.4f', \
    rrrr[0,0,1,2], rrrr[1,1,0,2], rrrr[2,2,0,1])
     
    coeff = mf.mo_coeff[:,mf.mo_occ>0]
    occ = mf.mo_occ[mf.mo_occ>0]
    energy = mf.mo_energy[mf.mo_occ>0]
    den_file = name+'.mol'
    fspt = open(den_file,'w')
    molden.header(mol, fspt)
    molden.orbital_coeff(mol, fspt, coeff, ene=energy, occ=occ) 
    fspt.close()                    
    cmd = '/home/jluis/bin/molden2aim '+name
    os.system(cmd)
    den_file = name+'.wfn'
    fspt = open(den_file,'a')
    fspt.write('RHF\n')
    fspt.close()                    

    pmd_file = name+'.pmd'
    fspt = open(pmd_file,'w')
    fspt.write('%s.wfn\n' % (name))
    if (mol.symmetry == False):
        fspt.write('nosymmetry\n')
    fspt.write('tes\n')
    fspt.write('  epsiscp 0.220\n')
    fspt.write('  radialquad 7\n')
    fspt.write('  rmapping 2\n')
    fspt.write('  lmax 10\n')
    fspt.write('  nr 551\n')
    fspt.write('  lebedev 5810\n')
    fspt.write('  betasphere\n')
    for ia in range(mol.natm):
        symb = mol.atom_pure_symbol(ia)
        inuc = lib.parameters.NUC[symb]
        betarad = radii.COVALENT[inuc]/3.5
        fspt.write('  betaradw %d %1.3f\n' % ((ia+1),betarad))
    fspt.write('  radialquadbeta 7\n')
    fspt.write('  rmappingbeta 3\n')
    fspt.write('  lmaxbeta 8\n')
    fspt.write('  nrb 451\n')
    fspt.write('  lebedevbeta 3074\n')
    fspt.write('  dafh\n')
    fspt.write('endtes')
    fspt.close()                    

    cmd = 'rm '+name+'.mol'
    os.system(cmd)
#INFO: ******************** input file end ********************


System: ('Linux', 'silicio', '3.16.0-4-amd64', '#1 SMP Debian 3.16.51-3 (2017-12-13)', 'x86_64', '')  Threads 12
Python 2.7.14 (default, Apr  9 2018, 16:34:43) 
[GCC 7.3.0]
numpy 1.14.2  scipy 1.0.1
Date: Wed Jun 27 23:31:20 2018
PySCF version 1.5
PySCF path  /home/jluis/src/pyscf/pyscf
GIT ORIG_HEAD f2dbb26d09ae5148fbf5975669a994500ac7a4c9
GIT HEAD      ref: refs/heads/master
GIT master branch  f2dbb26d09ae5148fbf5975669a994500ac7a4c9

[ENV] PYSCF_TMPDIR /scratch-ssd/jluis
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 9
[INPUT] num. electrons = 34
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry 0 subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C      1.477129000000   0.541816000000   0.009134000000 AA    2.791369260653   1.023883849907   0.017260758422 Bohr
[INPUT]  2 H      1.750135000000   0.003639000000   0.926879000000 AA    3.307275831016   0.006876713367   1.751547460611 Bohr
[INPUT]  3 H      1.923356000000   0.013549000000  -0.844250000000 AA    3.634616080039   0.025603899262  -1.595401280664 Bohr
[INPUT]  4 H      1.920378000000   1.545783000000   0.058074000000 AA    3.628988475640   2.921106518009   0.109743954958 Bohr
[INPUT]  5 C     -0.031058000000   0.647086000000  -0.137806000000 AA   -0.058691113977   1.222815319040  -0.260415598322 Bohr
[INPUT]  6 H     -0.465715000000   1.177274000000   0.718866000000 AA   -0.880073802102   2.224725433571   1.358459860262 Bohr
[INPUT]  7 H     -0.292107000000   1.187363000000  -1.056427000000 AA   -0.552002229068   2.243790880442  -1.996357700596 Bohr
[INPUT]  8 S     -0.745970000000  -1.040846000000  -0.217413000000 AA   -1.409678997142  -1.966913877849  -0.410851025920 Bohr
[INPUT]  9 H     -2.042408000000  -0.670133000000  -0.341597000000 AA   -3.859591754621  -1.266367837033  -0.645524774973 Bohr

nuclear repulsion = 107.162502755436
number of shells = 93
number of NR pGTOs = 341
number of NR cGTOs = 280
basis = aug-cc-pvtz
ecp = {}
CPU time:    135669.64


******** <class 'pyscf.scf.hf.RHF'> flags ********
method = RHF
initial guess = minao
damping factor = 0
level shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
DIIS start cycle = 1
DIIS space = 8
SCF tol = 1e-09
SCF gradient tol = None
max. SCF cycles = 120
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = c2h5sh.chk
max_memory 10000 MB (current use 177 MB)
Set gradient conv threshold to 3.16228e-05
init E= -477.096969008841
  HOMO = -0.28052513572541  LUMO = 0.0188970960454181
cycle= 1 E= -476.770272356891  delta_E= 0.327  |g|= 0.298  |ddm|= 2.14
  HOMO = -0.344678622848928  LUMO = 0.0263839101551874
cycle= 2 E= -476.801398372869  delta_E= -0.0311  |g|= 0.101  |ddm|= 0.359
  HOMO = -0.35710492629398  LUMO = 0.0300488257481944
cycle= 3 E= -476.804656787507  delta_E= -0.00326  |g|= 0.0386  |ddm|= 0.127
  HOMO = -0.354393433128471  LUMO = 0.029612316916071
cycle= 4 E= -476.805222104813  delta_E= -0.000565  |g|= 0.00752  |ddm|= 0.0411
  HOMO = -0.354338852566369  LUMO = 0.0295987969897079
cycle= 5 E= -476.805251580077  delta_E= -2.95e-05  |g|= 0.00262  |ddm|= 0.0116
  HOMO = -0.35474800792201  LUMO = 0.0296091518602298
cycle= 6 E= -476.805256158805  delta_E= -4.58e-06  |g|= 0.000822  |ddm|= 0.00449
  HOMO = -0.354782317776483  LUMO = 0.0296268683704684
cycle= 7 E= -476.805256644547  delta_E= -4.86e-07  |g|= 0.000236  |ddm|= 0.0016
  HOMO = -0.354825775615229  LUMO = 0.0296278841874583
cycle= 8 E= -476.805256685892  delta_E= -4.13e-08  |g|= 5.74e-05  |ddm|= 0.000546
  HOMO = -0.354832711704388  LUMO = 0.0296291818199263
cycle= 9 E= -476.805256688117  delta_E= -2.23e-09  |g|= 1.78e-05  |ddm|= 0.000158
  HOMO = -0.354830943403558  LUMO = 0.0296294495988813
cycle= 10 E= -476.805256688323  delta_E= -2.06e-10  |g|= 6.11e-06  |ddm|= 5.07e-05
  HOMO = -0.354832570895199  LUMO = 0.0296295902399784
Extra cycle  E= -476.805256688342  delta_E= -1.92e-11  |g|= 2.68e-06  |ddm|= 1.25e-05
converged SCF energy = -476.805256688342
Electronic spatial extent <R**2> (au): 306.5306
* Multipoles in the independent field-basis, Gauge -> (0,0,0)
Electronic Dipole moment(X, Y, Z, Debye): -2.2843, -31.8605, -23.0182
Nuclear Dipole moment(X, Y, Z, Debye): -2.2357, -30.0808, -23.0030
Total Dipole moment(X, Y, Z, Debye): 0.0486, 1.7797, 0.0152
Quadrupole moments (Debye-Angs)
Total Quadrupole moments (XX, YY, ZZ): -25.3612, -29.3090, -29.2671
Total Quadrupole moments (XY, XZ, YZ): -0.3041, 0.3754, -0.2762
Octupole moments (Debye-Angs**2)
Total Octupole moments (XXX, YYY, ZZZ, XYY): -5.7107, 18.9237, 12.8872, 0.6268
Total Octupole moments (XXY, XXZ, XZZ, YZZ): 3.6713, 2.5777, 1.8172, 8.3574
Total Octupole moments (YYZ, XYZ): 4.1317, -0.4236
Hexadecapole moments (Debye-Angs**3)
Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): -201.5104, -169.2077, -57.0309, -46.5896
Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): -6.0536, -48.3525, -7.6394, -9.2103
Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): -9.8892, -60.2366, -45.1208, -40.2805
Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): -1.1156, -2.1578, -20.3775
