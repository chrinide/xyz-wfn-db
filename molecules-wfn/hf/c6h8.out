#INFO: **** input file is /home/jluis/src/git/db/molecules-wfn/hf/run_sp.py ****
#!/usr/bin/env python

import numpy, sys, os
from pyscf import lib, gto, scf, dft
from pyscf.tools import molden
from pyscf.data import radii

def read_molecule(path):

    charge = spin = 0
    with open(path, 'r') as myfile:
        output = myfile.read()
        output = output.lstrip()
        output = output.rstrip()
        output = output.split('\n')

    try:
        int(output[0])
    except ValueError:
        try:
            charge = int(output[0].split(' ')[0])
            spin = int(output[0].split(' ')[1]) - 1
        except ValueError:
            molecule = output
        else:
            molecule = '\n'.join(output[1:])
    else:
        if int(output[0]) == len(output) - 2:
            molecule = '\n'.join(output[2:])
            try:
                charge = int(output[1].split(' ')[0])
                spin = int(output[1].split(' ')[1])-1
            except ValueError:
                pass
        else:
            print "THIS IS NOT A VALID XYZ FILE"

    return (molecule, charge, spin)

directory = '../../molecules/'
files = [i for i in os.listdir(directory) if i.endswith('.xyz')]

for filename in files:

    name = filename[:-8]
    mol = gto.Mole()
    (mol.atom, charge, spin) = read_molecule(directory+filename)
    mol.basis = 'aug-cc-pvtz'
    mol.charge = charge
    mol.spin = spin
    mol.output = name+'.out'
    mol.symmetry = 0
    mol.max_memory = 10000
    mol.verbose = 4
    mol.build()

    mf = scf.RHF(mol) 
    mf = scf.addons.remove_linear_dep_(mf)
    mf.max_cycle = 120
    mf.chkfile = name+'.chk'
    mf.kernel()

    dm = mf.make_rdm1()
    nao = mol.nao_nr()
    unit = 2.541746
    origin = ([0.0,0.0,0.0])
    charges = mol.atom_charges()
    coords  = mol.atom_coords()
    mol.set_common_orig(origin)
    r2 = mol.intor_symmetric('int1e_r2')
    r2 = numpy.einsum('ij,ji->', r2, dm)
    lib.logger.info(mf,'Electronic spatial extent <R**2> (au): %.4f', r2)

    lib.logger.info(mf,'* Multipoles in the independent field-basis, Gauge -> (0,0,0)')
    ao_dip = mol.intor_symmetric('int1e_r', comp=3)
    el_dip = numpy.einsum('xij,ji->x', ao_dip, dm)
    lib.logger.info(mf,'Electronic Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *el_dip*unit)
    nucl_dip = numpy.einsum('i,ix->x', charges, coords)
    lib.logger.info(mf,'Nuclear Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *nucl_dip*unit)
    mol_dip = (nucl_dip - el_dip) * unit
    lib.logger.info(mf,'Total Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *mol_dip)

    lib.logger.info(mf,'Quadrupole moments (Debye-Angs)')
    rr = mol.intor_symmetric('int1e_rr', comp=9).reshape(3,3,nao,nao)
    rr = -1.0*numpy.einsum('xyij,ji->xy', rr, dm)
    rr += numpy.einsum('z,zx,zy->xy', charges, coords, coords)
    rr = rr*unit*lib.param.BOHR
    lib.logger.info(mf,'Total Quadrupole moments (XX, YY, ZZ): %.4f, %.4f, %.4f', \
    rr[0,0], rr[1,1], rr[2,2])
    lib.logger.info(mf,'Total Quadrupole moments (XY, XZ, YZ): %.4f, %.4f, %.4f', \
    rr[0,1], rr[0,2], rr[1,2])
 
    lib.logger.info(mf,'Octupole moments (Debye-Angs**2)')
    rrr = mol.intor_symmetric('int1e_rrr', comp=27).reshape(3,3,3,nao,nao)
    rrr = -1.0*numpy.einsum('xyzij,ji->xyz', rrr, dm)
    rrr += numpy.einsum('z,zx,zy,zk->xyk', charges, coords, coords, coords)
    rrr = rrr*unit*lib.param.BOHR**2
    lib.logger.info(mf,'Total Octupole moments (XXX, YYY, ZZZ, XYY): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,0], rrr[1,1,1], rrr[2,2,2], rrr[0,1,1])
    lib.logger.info(mf,'Total Octupole moments (XXY, XXZ, XZZ, YZZ): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,1], rrr[0,0,2], rrr[0,2,2], rrr[1,2,2])
    lib.logger.info(mf,'Total Octupole moments (YYZ, XYZ): %.4f, %.4f', rrr[1,1,2], rrr[0,1,2])

    lib.logger.info(mf,'Hexadecapole moments (Debye-Angs**3)')
    rrrr = mol.intor_symmetric('int1e_rrrr', comp=81).reshape(3,3,3,3,nao,nao)
    rrrr = -1.0*numpy.einsum('xyzwij,ji->xyzw', rrrr, dm)
    rrrr += numpy.einsum('z,zx,zy,zk,zw->xykw', charges, coords, coords, coords, coords)
    rrrr = rrrr*unit*lib.param.BOHR**3
    lib.logger.info(mf,'Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,0], rrrr[1,1,1,1], rrrr[2,2,2,2], rrrr[0,0,0,1])
    lib.logger.info(mf,'Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,2], rrrr[1,1,1,0], rrrr[1,1,1,2], rrrr[2,2,2,0])
    lib.logger.info(mf,'Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): %.4f, %.4f, %.4f, %.4f', \
    rrrr[2,2,2,1], rrrr[0,0,1,1], rrrr[0,0,2,2], rrrr[1,1,2,2])
    lib.logger.info(mf,'Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): %.4f, %.4f, %.4f', \
    rrrr[0,0,1,2], rrrr[1,1,0,2], rrrr[2,2,0,1])
     
    coeff = mf.mo_coeff[:,mf.mo_occ>0]
    occ = mf.mo_occ[mf.mo_occ>0]
    energy = mf.mo_energy[mf.mo_occ>0]
    den_file = name+'.mol'
    fspt = open(den_file,'w')
    molden.header(mol, fspt)
    molden.orbital_coeff(mol, fspt, coeff, ene=energy, occ=occ) 
    fspt.close()                    
    cmd = '/home/jluis/bin/molden2aim '+name
    os.system(cmd)
    den_file = name+'.wfn'
    fspt = open(den_file,'a')
    fspt.write('RHF\n')
    fspt.close()                    

    pmd_file = name+'.pmd'
    fspt = open(pmd_file,'w')
    fspt.write('%s.wfn\n' % (name))
    if (mol.symmetry == False):
        fspt.write('nosymmetry\n')
    fspt.write('tes\n')
    fspt.write('  epsiscp 0.220\n')
    fspt.write('  radialquad 7\n')
    fspt.write('  rmapping 2\n')
    fspt.write('  lmax 10\n')
    fspt.write('  nr 551\n')
    fspt.write('  lebedev 5810\n')
    fspt.write('  betasphere\n')
    for ia in range(mol.natm):
        symb = mol.atom_pure_symbol(ia)
        inuc = lib.parameters.NUC[symb]
        betarad = radii.COVALENT[inuc]/3.5
        fspt.write('  betaradw %d %1.3f\n' % ((ia+1),betarad))
    fspt.write('  radialquadbeta 7\n')
    fspt.write('  rmappingbeta 3\n')
    fspt.write('  lmaxbeta 8\n')
    fspt.write('  nrb 451\n')
    fspt.write('  lebedevbeta 3074\n')
    fspt.write('  dafh\n')
    fspt.write('endtes')
    fspt.close()                    

    cmd = 'rm '+name+'.mol'
    os.system(cmd)
#INFO: ******************** input file end ********************


System: ('Linux', 'silicio', '3.16.0-4-amd64', '#1 SMP Debian 3.16.51-3 (2017-12-13)', 'x86_64', '')  Threads 12
Python 2.7.14 (default, Apr  9 2018, 16:34:43) 
[GCC 7.3.0]
numpy 1.14.2  scipy 1.0.1
Date: Wed Jun 27 21:42:13 2018
PySCF version 1.5
PySCF path  /home/jluis/src/pyscf/pyscf
GIT ORIG_HEAD f2dbb26d09ae5148fbf5975669a994500ac7a4c9
GIT HEAD      ref: refs/heads/master
GIT master branch  f2dbb26d09ae5148fbf5975669a994500ac7a4c9

[ENV] PYSCF_TMPDIR /scratch-ssd/jluis
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 14
[INPUT] num. electrons = 44
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry 0 subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 H     -0.957368000000   1.206857000000   0.000000000000 AA   -1.809163320423   2.280629201514   0.000000000000 Bohr
[INPUT]  2 H      0.957368000000  -1.206857000000   0.000000000000 AA    1.809163320423  -2.280629201514   0.000000000000 Bohr
[INPUT]  3 H      2.153598000000   0.950325000000   0.000000000000 AA    4.069710402411   1.795853979327   0.000000000000 Bohr
[INPUT]  4 H     -2.153598000000  -0.950325000000   0.000000000000 AA   -4.069710402411  -1.795853979327   0.000000000000 Bohr
[INPUT]  5 H      2.132437000000   3.398586000000   0.000000000000 AA    4.029721907889   6.422396750781   0.000000000000 Bohr
[INPUT]  6 H     -2.132437000000  -3.398586000000   0.000000000000 AA   -4.029721907889  -6.422396750781   0.000000000000 Bohr
[INPUT]  7 H      0.270527000000   3.399292000000   0.000000000000 AA    0.511221939300   6.423730897425   0.000000000000 Bohr
[INPUT]  8 H     -0.270527000000  -3.399292000000   0.000000000000 AA   -0.511221939300  -6.423730897425   0.000000000000 Bohr
[INPUT]  9 C      0.000380000000   0.675748000000   0.000000000000 AA    0.000718095927   1.276978649223   0.000000000000 Bohr
[INPUT] 10 C     -0.000380000000  -0.675748000000   0.000000000000 AA   -0.000718095927  -1.276978649223   0.000000000000 Bohr
[INPUT] 11 C      1.199515000000   1.486727000000   0.000000000000 AA    2.266754832308   2.809506851996   0.000000000000 Bohr
[INPUT] 12 C     -1.199515000000  -1.486727000000   0.000000000000 AA   -2.266754832308  -2.809506851996   0.000000000000 Bohr
[INPUT] 13 C      1.202528000000   2.830398000000   0.000000000000 AA    2.272448577121   5.348677043517   0.000000000000 Bohr
[INPUT] 14 C     -1.202528000000  -2.830398000000   0.000000000000 AA   -2.272448577121  -5.348677043517   0.000000000000 Bohr

nuclear repulsion = 193.706617129293
number of shells = 150
number of NR pGTOs = 548
number of NR cGTOs = 460
basis = aug-cc-pvtz
ecp = {}
CPU time:     58637.66


******** <class 'pyscf.scf.hf.RHF'> flags ********
method = RHF
initial guess = minao
damping factor = 0
level shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
DIIS start cycle = 1
DIIS space = 8
SCF tol = 1e-09
SCF gradient tol = None
max. SCF cycles = 120
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = c6h8.chk
max_memory 10000 MB (current use 165 MB)
Set gradient conv threshold to 3.16228e-05
init E= -233.397844885134
  HOMO = -0.239933923451876  LUMO = -0.0629933984913123
cycle= 1 E= -231.823863253359  delta_E= 1.57  |g|= 0.417  |ddm|= 6.95
  HOMO = -0.277860220305284  LUMO = 0.0306087466085599
cycle= 2 E= -231.885736505681  delta_E= -0.0619  |g|= 0.112  |ddm|= 0.689
  HOMO = -0.302150562822763  LUMO = 0.0303094761528742
cycle= 3 E= -231.891321023893  delta_E= -0.00558  |g|= 0.0372  |ddm|= 0.308
  HOMO = -0.292886546227348  LUMO = 0.0305194273563663
cycle= 4 E= -231.891802116622  delta_E= -0.000481  |g|= 0.00711  |ddm|= 0.0641
  HOMO = -0.294069683204196  LUMO = 0.0304953213555839
cycle= 5 E= -231.891834383794  delta_E= -3.23e-05  |g|= 0.00328  |ddm|= 0.0223
  HOMO = -0.294379670278999  LUMO = 0.0304915085918524
cycle= 6 E= -231.891839093348  delta_E= -4.71e-06  |g|= 0.000894  |ddm|= 0.00546
  HOMO = -0.294516764082094  LUMO = 0.0304915056587817
cycle= 7 E= -231.891839628641  delta_E= -5.35e-07  |g|= 0.00023  |ddm|= 0.00201
  HOMO = -0.294530394043685  LUMO = 0.0304914667244416
cycle= 8 E= -231.891839653591  delta_E= -2.5e-08  |g|= 7.16e-05  |ddm|= 0.000717
  HOMO = -0.294546609826754  LUMO = 0.030491400449926
cycle= 9 E= -231.891839656464  delta_E= -2.87e-09  |g|= 2.02e-05  |ddm|= 0.0003
  HOMO = -0.29454813864219  LUMO = 0.0304914436419613
cycle= 10 E= -231.891839656769  delta_E= -3.05e-10  |g|= 5.35e-06  |ddm|= 7.12e-05
  HOMO = -0.294548538876854  LUMO = 0.030491438111188
Extra cycle  E= -231.891839656787  delta_E= -1.81e-11  |g|= 2.41e-06  |ddm|= 1.38e-05
converged SCF energy = -231.891839656787
Electronic spatial extent <R**2> (au): 918.9781
* Multipoles in the independent field-basis, Gauge -> (0,0,0)
Electronic Dipole moment(X, Y, Z, Debye): 0.0000, -0.0000, 0.0000
Nuclear Dipole moment(X, Y, Z, Debye): 0.0000, 0.0000, 0.0000
Total Dipole moment(X, Y, Z, Debye): -0.0000, 0.0000, -0.0000
Quadrupole moments (Debye-Angs)
Total Quadrupole moments (XX, YY, ZZ): -34.1750, -34.2912, -43.4628
Total Quadrupole moments (XY, XZ, YZ): -0.6866, -0.0000, -0.0000
Octupole moments (Debye-Angs**2)
Total Octupole moments (XXX, YYY, ZZZ, XYY): 0.0000, -0.0000, 0.0000, -0.0000
Total Octupole moments (XXY, XXZ, XZZ, YZZ): 0.0000, -0.0000, 0.0000, 0.0000
Total Octupole moments (YYZ, XYZ): 0.0000, -0.0000
Hexadecapole moments (Debye-Angs**3)
Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): -286.6278, -877.5867, -55.2514, -187.8849
Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): -0.0000, -188.3739, -0.0000, -0.0000
Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): -0.0000, -187.6335, -69.8855, -193.6019
Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): -0.0000, -0.0000, -81.6213
