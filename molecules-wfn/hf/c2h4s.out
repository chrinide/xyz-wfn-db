#INFO: **** input file is /home/jluis/src/git/db/molecules-wfn/hf/run_sp.py ****
#!/usr/bin/env python

import numpy, sys, os
from pyscf import lib, gto, scf, dft
from pyscf.tools import molden
from pyscf.data import radii

def read_molecule(path):

    charge = spin = 0
    with open(path, 'r') as myfile:
        output = myfile.read()
        output = output.lstrip()
        output = output.rstrip()
        output = output.split('\n')

    try:
        int(output[0])
    except ValueError:
        try:
            charge = int(output[0].split(' ')[0])
            spin = int(output[0].split(' ')[1]) - 1
        except ValueError:
            molecule = output
        else:
            molecule = '\n'.join(output[1:])
    else:
        if int(output[0]) == len(output) - 2:
            molecule = '\n'.join(output[2:])
            try:
                charge = int(output[1].split(' ')[0])
                spin = int(output[1].split(' ')[1])-1
            except ValueError:
                pass
        else:
            print "THIS IS NOT A VALID XYZ FILE"

    return (molecule, charge, spin)

directory = '../../molecules/'
files = [i for i in os.listdir(directory) if i.endswith('.xyz')]

for filename in files:

    name = filename[:-8]
    mol = gto.Mole()
    (mol.atom, charge, spin) = read_molecule(directory+filename)
    mol.basis = 'aug-cc-pvtz'
    mol.charge = charge
    mol.spin = spin
    mol.output = name+'.out'
    mol.symmetry = 0
    mol.max_memory = 10000
    mol.verbose = 4
    mol.build()

    mf = scf.RHF(mol) 
    mf = scf.addons.remove_linear_dep_(mf)
    mf.max_cycle = 120
    mf.chkfile = name+'.chk'
    mf.kernel()

    dm = mf.make_rdm1()
    nao = mol.nao_nr()
    unit = 2.541746
    origin = ([0.0,0.0,0.0])
    charges = mol.atom_charges()
    coords  = mol.atom_coords()
    mol.set_common_orig(origin)
    r2 = mol.intor_symmetric('int1e_r2')
    r2 = numpy.einsum('ij,ji->', r2, dm)
    lib.logger.info(mf,'Electronic spatial extent <R**2> (au): %.4f', r2)

    lib.logger.info(mf,'* Multipoles in the independent field-basis, Gauge -> (0,0,0)')
    ao_dip = mol.intor_symmetric('int1e_r', comp=3)
    el_dip = numpy.einsum('xij,ji->x', ao_dip, dm)
    lib.logger.info(mf,'Electronic Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *el_dip*unit)
    nucl_dip = numpy.einsum('i,ix->x', charges, coords)
    lib.logger.info(mf,'Nuclear Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *nucl_dip*unit)
    mol_dip = (nucl_dip - el_dip) * unit
    lib.logger.info(mf,'Total Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *mol_dip)

    lib.logger.info(mf,'Quadrupole moments (Debye-Angs)')
    rr = mol.intor_symmetric('int1e_rr', comp=9).reshape(3,3,nao,nao)
    rr = -1.0*numpy.einsum('xyij,ji->xy', rr, dm)
    rr += numpy.einsum('z,zx,zy->xy', charges, coords, coords)
    rr = rr*unit*lib.param.BOHR
    lib.logger.info(mf,'Total Quadrupole moments (XX, YY, ZZ): %.4f, %.4f, %.4f', \
    rr[0,0], rr[1,1], rr[2,2])
    lib.logger.info(mf,'Total Quadrupole moments (XY, XZ, YZ): %.4f, %.4f, %.4f', \
    rr[0,1], rr[0,2], rr[1,2])
 
    lib.logger.info(mf,'Octupole moments (Debye-Angs**2)')
    rrr = mol.intor_symmetric('int1e_rrr', comp=27).reshape(3,3,3,nao,nao)
    rrr = -1.0*numpy.einsum('xyzij,ji->xyz', rrr, dm)
    rrr += numpy.einsum('z,zx,zy,zk->xyk', charges, coords, coords, coords)
    rrr = rrr*unit*lib.param.BOHR**2
    lib.logger.info(mf,'Total Octupole moments (XXX, YYY, ZZZ, XYY): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,0], rrr[1,1,1], rrr[2,2,2], rrr[0,1,1])
    lib.logger.info(mf,'Total Octupole moments (XXY, XXZ, XZZ, YZZ): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,1], rrr[0,0,2], rrr[0,2,2], rrr[1,2,2])
    lib.logger.info(mf,'Total Octupole moments (YYZ, XYZ): %.4f, %.4f', rrr[1,1,2], rrr[0,1,2])

    lib.logger.info(mf,'Hexadecapole moments (Debye-Angs**3)')
    rrrr = mol.intor_symmetric('int1e_rrrr', comp=81).reshape(3,3,3,3,nao,nao)
    rrrr = -1.0*numpy.einsum('xyzwij,ji->xyzw', rrrr, dm)
    rrrr += numpy.einsum('z,zx,zy,zk,zw->xykw', charges, coords, coords, coords, coords)
    rrrr = rrrr*unit*lib.param.BOHR**3
    lib.logger.info(mf,'Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,0], rrrr[1,1,1,1], rrrr[2,2,2,2], rrrr[0,0,0,1])
    lib.logger.info(mf,'Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,2], rrrr[1,1,1,0], rrrr[1,1,1,2], rrrr[2,2,2,0])
    lib.logger.info(mf,'Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): %.4f, %.4f, %.4f, %.4f', \
    rrrr[2,2,2,1], rrrr[0,0,1,1], rrrr[0,0,2,2], rrrr[1,1,2,2])
    lib.logger.info(mf,'Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): %.4f, %.4f, %.4f', \
    rrrr[0,0,1,2], rrrr[1,1,0,2], rrrr[2,2,0,1])
     
    coeff = mf.mo_coeff[:,mf.mo_occ>0]
    occ = mf.mo_occ[mf.mo_occ>0]
    energy = mf.mo_energy[mf.mo_occ>0]
    den_file = name+'.mol'
    fspt = open(den_file,'w')
    molden.header(mol, fspt)
    molden.orbital_coeff(mol, fspt, coeff, ene=energy, occ=occ) 
    fspt.close()                    
    cmd = '/home/jluis/bin/molden2aim '+name
    os.system(cmd)
    den_file = name+'.wfn'
    fspt = open(den_file,'a')
    fspt.write('RHF\n')
    fspt.close()                    

    pmd_file = name+'.pmd'
    fspt = open(pmd_file,'w')
    fspt.write('%s.wfn\n' % (name))
    if (mol.symmetry == False):
        fspt.write('nosymmetry\n')
    fspt.write('tes\n')
    fspt.write('  epsiscp 0.220\n')
    fspt.write('  radialquad 7\n')
    fspt.write('  rmapping 2\n')
    fspt.write('  lmax 10\n')
    fspt.write('  nr 551\n')
    fspt.write('  lebedev 5810\n')
    fspt.write('  betasphere\n')
    for ia in range(mol.natm):
        symb = mol.atom_pure_symbol(ia)
        inuc = lib.parameters.NUC[symb]
        betarad = radii.COVALENT[inuc]/3.5
        fspt.write('  betaradw %d %1.3f\n' % ((ia+1),betarad))
    fspt.write('  radialquadbeta 7\n')
    fspt.write('  rmappingbeta 3\n')
    fspt.write('  lmaxbeta 8\n')
    fspt.write('  nrb 451\n')
    fspt.write('  lebedevbeta 3074\n')
    fspt.write('  dafh\n')
    fspt.write('endtes')
    fspt.close()                    

    cmd = 'rm '+name+'.mol'
    os.system(cmd)
#INFO: ******************** input file end ********************


System: ('Linux', 'silicio', '3.16.0-4-amd64', '#1 SMP Debian 3.16.51-3 (2017-12-13)', 'x86_64', '')  Threads 12
Python 2.7.14 (default, Apr  9 2018, 16:34:43) 
[GCC 7.3.0]
numpy 1.14.2  scipy 1.0.1
Date: Wed Jun 27 20:26:47 2018
PySCF version 1.5
PySCF path  /home/jluis/src/pyscf/pyscf
GIT ORIG_HEAD f2dbb26d09ae5148fbf5975669a994500ac7a4c9
GIT HEAD      ref: refs/heads/master
GIT master branch  f2dbb26d09ae5148fbf5975669a994500ac7a4c9

[ENV] PYSCF_TMPDIR /scratch-ssd/jluis
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 7
[INPUT] num. electrons = 32
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry 0 subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C     -0.003754000000   0.000769000000  -0.070290000000 AA   -0.007094031872   0.001453199390  -0.132828849296 Bohr
[INPUT]  2 S      0.081355000000  -0.000296000000   1.551909000000 AA    0.153738668864  -0.000559358933   2.932682980248 Bohr
[INPUT]  3 H      0.932540000000  -0.000544000000  -0.648726000000 AA    1.762245200202  -0.001028011012  -1.225914469885 Bohr
[INPUT]  4 C     -1.247133000000   0.000132000000  -0.885303000000 AA   -2.356739810907   0.000249443848  -1.672980207256 Bohr
[INPUT]  5 H     -2.144918000000  -0.000078000000  -0.258225000000 AA   -4.053307579650  -0.000147398638  -0.487974528516 Bohr
[INPUT]  6 H     -1.253215000000   0.880333000000  -1.549084000000 AA   -2.368233125197   1.663588268417  -2.927344503946 Bohr
[INPUT]  7 H     -1.252589000000  -0.880316000000  -1.548763000000 AA   -2.367050156643  -1.663556143073  -2.926737901860 Bohr

nuclear repulsion = 92.716906411329
number of shells = 75
number of NR pGTOs = 291
number of NR cGTOs = 234
basis = aug-cc-pvtz
ecp = {}
CPU time:      4829.89


******** <class 'pyscf.scf.hf.RHF'> flags ********
method = RHF
initial guess = minao
damping factor = 0
level shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
DIIS start cycle = 1
DIIS space = 8
SCF tol = 1e-09
SCF gradient tol = None
max. SCF cycles = 120
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = c2h4s.chk
max_memory 10000 MB (current use 151 MB)
Set gradient conv threshold to 3.16228e-05
init E= -476.028496431632
  HOMO = -0.267692195591521  LUMO = -0.0677951224629198
cycle= 1 E= -475.561772830888  delta_E= 0.467  |g|= 0.372  |ddm|= 2.04
  HOMO = -0.307931158660275  LUMO = 0.0170884543535309
cycle= 2 E= -475.597342472903  delta_E= -0.0356  |g|= 0.255  |ddm|= 0.48
  HOMO = -0.33875448355757  LUMO = 0.0260851056319325
cycle= 3 E= -475.613840374088  delta_E= -0.0165  |g|= 0.0586  |ddm|= 0.215
  HOMO = -0.343223755274095  LUMO = 0.0267435985147632
cycle= 4 E= -475.615361902223  delta_E= -0.00152  |g|= 0.0103  |ddm|= 0.0694
  HOMO = -0.340762428536521  LUMO = 0.0264372586540094
cycle= 5 E= -475.615438033771  delta_E= -7.61e-05  |g|= 0.0043  |ddm|= 0.0204
  HOMO = -0.341789683382715  LUMO = 0.0264726032121243
cycle= 6 E= -475.615450778584  delta_E= -1.27e-05  |g|= 0.00138  |ddm|= 0.0108
  HOMO = -0.341999993033191  LUMO = 0.0265289835013541
cycle= 7 E= -475.615452723798  delta_E= -1.95e-06  |g|= 0.000506  |ddm|= 0.00408
  HOMO = -0.342043020265505  LUMO = 0.0265419337103352
cycle= 8 E= -475.61545307146  delta_E= -3.48e-07  |g|= 0.0002  |ddm|= 0.00173
  HOMO = -0.342095549411903  LUMO = 0.0265482056707908
cycle= 9 E= -475.615453113719  delta_E= -4.23e-08  |g|= 6.97e-05  |ddm|= 0.000586
  HOMO = -0.342094171879069  LUMO = 0.0265510282858569
cycle= 10 E= -475.615453118369  delta_E= -4.65e-09  |g|= 1.77e-05  |ddm|= 0.000188
  HOMO = -0.342096502614663  LUMO = 0.0265511602908203
cycle= 11 E= -475.615453118632  delta_E= -2.62e-10  |g|= 4.52e-06  |ddm|= 4.31e-05
  HOMO = -0.342096902118523  LUMO = 0.0265512867104617
Extra cycle  E= -475.615453118646  delta_E= -1.41e-11  |g|= 2.29e-06  |ddm|= 8.22e-06
converged SCF energy = -475.615453118646
Electronic spatial extent <R**2> (au): 304.0365
* Multipoles in the independent field-basis, Gauge -> (0,0,0)
Electronic Dipole moment(X, Y, Z, Debye): -47.1037, 0.0008, 75.3887
Nuclear Dipole moment(X, Y, Z, Debye): -47.6565, 0.0003, 72.4909
Total Dipole moment(X, Y, Z, Debye): -0.5528, -0.0005, -2.8979
Quadrupole moments (Debye-Angs)
Total Quadrupole moments (XX, YY, ZZ): -26.8121, -26.7021, -28.0840
Total Quadrupole moments (XY, XZ, YZ): -0.0000, 0.1816, -0.0010
Octupole moments (Debye-Angs**2)
Total Octupole moments (XXX, YYY, ZZZ, XYY): 22.1577, -0.0039, -40.8769, 7.6532
Total Octupole moments (XXY, XXZ, XZZ, YZZ): -0.0019, -17.1875, 7.9760, -0.0059
Total Octupole moments (YYZ, XYZ): -14.1281, 0.0015
Hexadecapole moments (Debye-Angs**3)
Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): -118.8895, -40.2434, -267.0347, 0.0068
Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): -33.4869, 0.0062, 0.0162, -28.1009
Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): 0.0088, -27.7253, -72.1960, -49.4466
Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): 0.0085, -8.9491, 0.0033
