#INFO: **** input file is /home/jluis/src/git/db/molecules-wfn/hf/run_sp.py ****
#!/usr/bin/env python

import numpy, sys, os
from pyscf import lib, gto, scf, dft
from pyscf.tools import molden
from pyscf.data import radii

def read_molecule(path):

    charge = spin = 0
    with open(path, 'r') as myfile:
        output = myfile.read()
        output = output.lstrip()
        output = output.rstrip()
        output = output.split('\n')

    try:
        int(output[0])
    except ValueError:
        try:
            charge = int(output[0].split(' ')[0])
            spin = int(output[0].split(' ')[1]) - 1
        except ValueError:
            molecule = output
        else:
            molecule = '\n'.join(output[1:])
    else:
        if int(output[0]) == len(output) - 2:
            molecule = '\n'.join(output[2:])
            try:
                charge = int(output[1].split(' ')[0])
                spin = int(output[1].split(' ')[1])-1
            except ValueError:
                pass
        else:
            print "THIS IS NOT A VALID XYZ FILE"

    return (molecule, charge, spin)

directory = '../../molecules/'
files = [i for i in os.listdir(directory) if i.endswith('.xyz')]

for filename in files:

    name = filename[:-8]
    mol = gto.Mole()
    (mol.atom, charge, spin) = read_molecule(directory+filename)
    mol.basis = 'aug-cc-pvtz'
    mol.charge = charge
    mol.spin = spin
    mol.output = name+'.out'
    mol.symmetry = 0
    mol.max_memory = 10000
    mol.verbose = 4
    mol.build()

    mf = scf.RHF(mol) 
    mf = scf.addons.remove_linear_dep_(mf)
    mf.max_cycle = 120
    mf.chkfile = name+'.chk'
    mf.kernel()

    dm = mf.make_rdm1()
    nao = mol.nao_nr()
    unit = 2.541746
    origin = ([0.0,0.0,0.0])
    charges = mol.atom_charges()
    coords  = mol.atom_coords()
    mol.set_common_orig(origin)
    r2 = mol.intor_symmetric('int1e_r2')
    r2 = numpy.einsum('ij,ji->', r2, dm)
    lib.logger.info(mf,'Electronic spatial extent <R**2> (au): %.4f', r2)

    lib.logger.info(mf,'* Multipoles in the independent field-basis, Gauge -> (0,0,0)')
    ao_dip = mol.intor_symmetric('int1e_r', comp=3)
    el_dip = numpy.einsum('xij,ji->x', ao_dip, dm)
    lib.logger.info(mf,'Electronic Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *el_dip*unit)
    nucl_dip = numpy.einsum('i,ix->x', charges, coords)
    lib.logger.info(mf,'Nuclear Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *nucl_dip*unit)
    mol_dip = (nucl_dip - el_dip) * unit
    lib.logger.info(mf,'Total Dipole moment(X, Y, Z, Debye): %.4f, %.4f, %.4f', *mol_dip)

    lib.logger.info(mf,'Quadrupole moments (Debye-Angs)')
    rr = mol.intor_symmetric('int1e_rr', comp=9).reshape(3,3,nao,nao)
    rr = -1.0*numpy.einsum('xyij,ji->xy', rr, dm)
    rr += numpy.einsum('z,zx,zy->xy', charges, coords, coords)
    rr = rr*unit*lib.param.BOHR
    lib.logger.info(mf,'Total Quadrupole moments (XX, YY, ZZ): %.4f, %.4f, %.4f', \
    rr[0,0], rr[1,1], rr[2,2])
    lib.logger.info(mf,'Total Quadrupole moments (XY, XZ, YZ): %.4f, %.4f, %.4f', \
    rr[0,1], rr[0,2], rr[1,2])
 
    lib.logger.info(mf,'Octupole moments (Debye-Angs**2)')
    rrr = mol.intor_symmetric('int1e_rrr', comp=27).reshape(3,3,3,nao,nao)
    rrr = -1.0*numpy.einsum('xyzij,ji->xyz', rrr, dm)
    rrr += numpy.einsum('z,zx,zy,zk->xyk', charges, coords, coords, coords)
    rrr = rrr*unit*lib.param.BOHR**2
    lib.logger.info(mf,'Total Octupole moments (XXX, YYY, ZZZ, XYY): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,0], rrr[1,1,1], rrr[2,2,2], rrr[0,1,1])
    lib.logger.info(mf,'Total Octupole moments (XXY, XXZ, XZZ, YZZ): %.4f, %.4f, %.4f, %.4f', \
    rrr[0,0,1], rrr[0,0,2], rrr[0,2,2], rrr[1,2,2])
    lib.logger.info(mf,'Total Octupole moments (YYZ, XYZ): %.4f, %.4f', rrr[1,1,2], rrr[0,1,2])

    lib.logger.info(mf,'Hexadecapole moments (Debye-Angs**3)')
    rrrr = mol.intor_symmetric('int1e_rrrr', comp=81).reshape(3,3,3,3,nao,nao)
    rrrr = -1.0*numpy.einsum('xyzwij,ji->xyzw', rrrr, dm)
    rrrr += numpy.einsum('z,zx,zy,zk,zw->xykw', charges, coords, coords, coords, coords)
    rrrr = rrrr*unit*lib.param.BOHR**3
    lib.logger.info(mf,'Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,0], rrrr[1,1,1,1], rrrr[2,2,2,2], rrrr[0,0,0,1])
    lib.logger.info(mf,'Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): %.4f, %.4f, %.4f, %.4f', \
    rrrr[0,0,0,2], rrrr[1,1,1,0], rrrr[1,1,1,2], rrrr[2,2,2,0])
    lib.logger.info(mf,'Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): %.4f, %.4f, %.4f, %.4f', \
    rrrr[2,2,2,1], rrrr[0,0,1,1], rrrr[0,0,2,2], rrrr[1,1,2,2])
    lib.logger.info(mf,'Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): %.4f, %.4f, %.4f', \
    rrrr[0,0,1,2], rrrr[1,1,0,2], rrrr[2,2,0,1])
     
    coeff = mf.mo_coeff[:,mf.mo_occ>0]
    occ = mf.mo_occ[mf.mo_occ>0]
    energy = mf.mo_energy[mf.mo_occ>0]
    den_file = name+'.mol'
    fspt = open(den_file,'w')
    molden.header(mol, fspt)
    molden.orbital_coeff(mol, fspt, coeff, ene=energy, occ=occ) 
    fspt.close()                    
    cmd = '/home/jluis/bin/molden2aim '+name
    os.system(cmd)
    den_file = name+'.wfn'
    fspt = open(den_file,'a')
    fspt.write('RHF\n')
    fspt.close()                    

    pmd_file = name+'.pmd'
    fspt = open(pmd_file,'w')
    fspt.write('%s.wfn\n' % (name))
    if (mol.symmetry == False):
        fspt.write('nosymmetry\n')
    fspt.write('tes\n')
    fspt.write('  epsiscp 0.220\n')
    fspt.write('  radialquad 7\n')
    fspt.write('  rmapping 2\n')
    fspt.write('  lmax 10\n')
    fspt.write('  nr 551\n')
    fspt.write('  lebedev 5810\n')
    fspt.write('  betasphere\n')
    for ia in range(mol.natm):
        symb = mol.atom_pure_symbol(ia)
        inuc = lib.parameters.NUC[symb]
        betarad = radii.COVALENT[inuc]/3.5
        fspt.write('  betaradw %d %1.3f\n' % ((ia+1),betarad))
    fspt.write('  radialquadbeta 7\n')
    fspt.write('  rmappingbeta 3\n')
    fspt.write('  lmaxbeta 8\n')
    fspt.write('  nrb 451\n')
    fspt.write('  lebedevbeta 3074\n')
    fspt.write('  dafh\n')
    fspt.write('endtes')
    fspt.close()                    

    cmd = 'rm '+name+'.mol'
    os.system(cmd)
#INFO: ******************** input file end ********************


System: ('Linux', 'silicio', '3.16.0-4-amd64', '#1 SMP Debian 3.16.51-3 (2017-12-13)', 'x86_64', '')  Threads 12
Python 2.7.14 (default, Apr  9 2018, 16:34:43) 
[GCC 7.3.0]
numpy 1.14.2  scipy 1.0.1
Date: Wed Jun 27 23:26:57 2018
PySCF version 1.5
PySCF path  /home/jluis/src/pyscf/pyscf
GIT ORIG_HEAD f2dbb26d09ae5148fbf5975669a994500ac7a4c9
GIT HEAD      ref: refs/heads/master
GIT master branch  f2dbb26d09ae5148fbf5975669a994500ac7a4c9

[ENV] PYSCF_TMPDIR /scratch-ssd/jluis
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 32
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry 0 subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 H     -0.908283000000  -0.688878000000  -0.000017000000 AA   -1.716406113598  -1.301790753238  -0.000032125344 Bohr
[INPUT]  2 H      1.085290000000  -1.838257000000   0.000008000000 AA    2.050900865729  -3.473802276565   0.000015117809 Bohr
[INPUT]  3 H      2.025279000000  -0.372763000000  -0.000014000000 AA    3.827222635833  -0.704419979371  -0.000026456166 Bohr
[INPUT]  4 C      0.010199000000  -0.085900000000   0.000017000000 AA    0.019273316744  -0.162327474100   0.000032125344 Bohr
[INPUT]  5 S     -0.049277000000   1.558284000000   0.000002000000 AA   -0.093120034240   2.944729984292   0.000003779452 Bohr
[INPUT]  6 N      1.123769000000  -0.830236000000   0.000005000000 AA    2.123615637276  -1.568918658754   0.000009448631 Bohr

nuclear repulsion = 94.4762061166567
number of shells = 66
number of NR pGTOs = 266
number of NR cGTOs = 211
basis = aug-cc-pvtz
ecp = {}
CPU time:    132635.09


******** <class 'pyscf.scf.hf.RHF'> flags ********
method = RHF
initial guess = minao
damping factor = 0
level shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
DIIS start cycle = 1
DIIS space = 8
SCF tol = 1e-09
SCF gradient tol = None
max. SCF cycles = 120
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = ch3ns.chk
max_memory 10000 MB (current use 177 MB)
Set gradient conv threshold to 3.16228e-05
init E= -492.119873212093
  HOMO = -0.284802269946001  LUMO = -0.00348609347278855
cycle= 1 E= -491.566606595599  delta_E= 0.553  |g|= 0.449  |ddm|= 1.82
  HOMO = -0.278324026352832  LUMO = -0.000359320106937482
cycle= 2 E= -491.615562547499  delta_E= -0.049  |g|= 0.318  |ddm|= 0.527
  HOMO = -0.32712034121893  LUMO = 0.0155288914784159
cycle= 3 E= -491.641296222361  delta_E= -0.0257  |g|= 0.0592  |ddm|= 0.234
  HOMO = -0.333558775830564  LUMO = 0.0178465474859259
cycle= 4 E= -491.642858688544  delta_E= -0.00156  |g|= 0.014  |ddm|= 0.0574
  HOMO = -0.329578450842171  LUMO = 0.0174036519178184
cycle= 5 E= -491.643012985164  delta_E= -0.000154  |g|= 0.00627  |ddm|= 0.0207
  HOMO = -0.331598985290531  LUMO = 0.0175654072540473
cycle= 6 E= -491.643042071406  delta_E= -2.91e-05  |g|= 0.00184  |ddm|= 0.0108
  HOMO = -0.331562744874049  LUMO = 0.0176611549492988
cycle= 7 E= -491.643044698505  delta_E= -2.63e-06  |g|= 0.000674  |ddm|= 0.00344
  HOMO = -0.331580274587769  LUMO = 0.0176804217199732
cycle= 8 E= -491.643044984737  delta_E= -2.86e-07  |g|= 0.000286  |ddm|= 0.000975
  HOMO = -0.331637915871936  LUMO = 0.0176884864885752
cycle= 9 E= -491.643045049767  delta_E= -6.5e-08  |g|= 0.000122  |ddm|= 0.000471
  HOMO = -0.331654835389204  LUMO = 0.0176960949173916
cycle= 10 E= -491.643045069571  delta_E= -1.98e-08  |g|= 3.5e-05  |ddm|= 0.000326
  HOMO = -0.331658715078795  LUMO = 0.0176968815774513
cycle= 11 E= -491.643045071223  delta_E= -1.65e-09  |g|= 1.01e-05  |ddm|= 0.000105
  HOMO = -0.331661469362458  LUMO = 0.0176972603831713
cycle= 12 E= -491.64304507131  delta_E= -8.66e-11  |g|= 2.72e-06  |ddm|= 2.51e-05
  HOMO = -0.331661005027737  LUMO = 0.0176972292725591
Extra cycle  E= -491.643045071311  delta_E= -1.25e-12  |g|= 1.52e-06  |ddm|= 3.52e-06
converged SCF energy = -491.643045071311
Electronic spatial extent <R**2> (au): 281.6833
* Multipoles in the independent field-basis, Gauge -> (0,0,0)
Electronic Dipole moment(X, Y, Z, Debye): 43.4260, 80.0716, 0.0007
Nuclear Dipole moment(X, Y, Z, Debye): 44.8688, 75.4372, 0.0007
Total Dipole moment(X, Y, Z, Debye): 1.4428, -4.6344, -0.0000
Quadrupole moments (Debye-Angs)
Total Quadrupole moments (XX, YY, ZZ): -23.0930, -26.4435, -28.1856
Total Quadrupole moments (XY, XZ, YZ): -1.0607, -0.0001, -0.0000
Octupole moments (Debye-Angs**2)
Total Octupole moments (XXX, YYY, ZZZ, XYY): -9.6449, -55.1055, -0.0004, -4.0254
Total Octupole moments (XXY, XXZ, XZZ, YZZ): -21.2221, -0.0003, -7.6489, -15.3087
Total Octupole moments (YYZ, XYZ): -0.0002, -0.0000
Hexadecapole moments (Debye-Angs**3)
Total Hexadecapole moments (XXXX, YYYY, ZZZZ, XXXY): -73.9120, -244.3557, -36.6036, 18.4498
Total Hexadecapole moments (XXXZ, YYYX, YYYZ, ZZZX): -0.0004, 11.5475, -0.0004, -0.0001
Total Hexadecapole moments (ZZZY, XXYY, XXZZ, YYZZ): -0.0001, -63.3019, -24.3294, -53.3163
Total Hexadecapole moments (XXYZ, YYXZ, ZZXY): 0.0000, -0.0000, 8.4924
